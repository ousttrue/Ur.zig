// this is generated by rawtypes
const expect = @import("std").testing.expect;

pub const ImVector = extern struct {
    Size: c_int,
    Capacity: c_int,
    Data: *anyopaque,
};

const STB_TEXTEDIT_UNDOSTATECOUNT = 99;
const STB_TEXTEDIT_UNDOCHARCOUNT = 999;
const STB_TEXTEDIT_POSITIONTYPE = c_int;
const STB_TEXTEDIT_CHARTYPE = u16;
const ImWchar = u16;
const ImGuiTableColumnIdx = i8;
const ImGuiTableDrawChannelIdx = u8;
const ImTextureID = *anyopaque;
const ImFileHandle = *anyopaque;
const ImGuiKey_NamedKey_BEGIN         = 512;
const ImGuiKey_NamedKey_END           = 0x285; //ImGuiKey_COUNT;
const ImGuiKey_NamedKey_COUNT         = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN;

pub const ImSpan = extern struct {
    Data: *anyopaque,
    DataEnd: *anyopaque,
};

pub const ImChunkStream = extern struct {
    Buf: ImVector,
};

pub const ImPool = extern struct {
    Buf: ImVector,
    Map: ImGuiStorage,
    FreeIdx: i32,
    AliveCount: i32,
};

pub const ImBitArray = extern struct {
    Storage: [(ImGuiKey_NamedKey_COUNT + 31) >> 5]u32,
};
pub const ImBitArrayForNamedKeys = ImBitArray;

pub const StbUndoRecord = extern struct {
    where: STB_TEXTEDIT_POSITIONTYPE,
    insert_length: STB_TEXTEDIT_POSITIONTYPE,
    delete_length: STB_TEXTEDIT_POSITIONTYPE,
    char_storage: c_int,
};

pub const StbUndoState = extern struct {
    undo_rec: [STB_TEXTEDIT_UNDOSTATECOUNT]StbUndoRecord,
    undo_char: [STB_TEXTEDIT_UNDOCHARCOUNT]STB_TEXTEDIT_CHARTYPE,
    undo_point: c_short,
    redo_point: c_short,
    undo_char_point: c_int,
    redo_char_point: c_int,
};

pub const STB_TexteditState = extern struct {
   cursor: c_int,
   select_start: c_int,
   select_end: c_int,
   insert_mode: u8,
   row_count_per_page: c_int,
   cursor_at_end_of_line: u8,
   initialized: u8,
   has_preferred_x: u8,
   single_line: u8,
   padding1: u8,
   padding2: u8,
   padding3: u8,
   preferred_x: f32,
   undostate: StbUndoState,
};

pub extern fn Custom_ButtonBehaviorMiddleRight() void;

pub const ImGuiWindowFlags = enum(c_int) {
    _None = 0,
    _NoTitleBar = 1,
    _NoResize = 2,
    _NoMove = 4,
    _NoScrollbar = 8,
    _NoScrollWithMouse = 16,
    _NoCollapse = 32,
    _AlwaysAutoResize = 64,
    _NoBackground = 128,
    _NoSavedSettings = 256,
    _NoMouseInputs = 512,
    _MenuBar = 1024,
    _HorizontalScrollbar = 2048,
    _NoFocusOnAppearing = 4096,
    _NoBringToFrontOnFocus = 8192,
    _AlwaysVerticalScrollbar = 16384,
    _AlwaysHorizontalScrollbar = 32768,
    _AlwaysUseWindowPadding = 65536,
    _NoNavInputs = 262144,
    _NoNavFocus = 524288,
    _UnsavedDocument = 1048576,
    _NoDocking = 2097152,
    _NoNav = 786432,
    _NoDecoration = 43,
    _NoInputs = 786944,
    _NavFlattened = 8388608,
    _ChildWindow = 16777216,
    _Tooltip = 33554432,
    _Popup = 67108864,
    _Modal = 134217728,
    _ChildMenu = 268435456,
    _DockNodeHost = 536870912,
};

pub const ImGuiInputTextFlags = enum(c_int) {
    _None = 0,
    _CharsDecimal = 1,
    _CharsHexadecimal = 2,
    _CharsUppercase = 4,
    _CharsNoBlank = 8,
    _AutoSelectAll = 16,
    _EnterReturnsTrue = 32,
    _CallbackCompletion = 64,
    _CallbackHistory = 128,
    _CallbackAlways = 256,
    _CallbackCharFilter = 512,
    _AllowTabInput = 1024,
    _CtrlEnterForNewLine = 2048,
    _NoHorizontalScroll = 4096,
    _AlwaysOverwrite = 8192,
    _ReadOnly = 16384,
    _Password = 32768,
    _NoUndoRedo = 65536,
    _CharsScientific = 131072,
    _CallbackResize = 262144,
    _CallbackEdit = 524288,
    _AlwaysInsertMode = 8192,
};

pub const ImGuiTreeNodeFlags = enum(c_int) {
    _None = 0,
    _Selected = 1,
    _Framed = 2,
    _AllowItemOverlap = 4,
    _NoTreePushOnOpen = 8,
    _NoAutoOpenOnLog = 16,
    _DefaultOpen = 32,
    _OpenOnDoubleClick = 64,
    _OpenOnArrow = 128,
    _Leaf = 256,
    _Bullet = 512,
    _FramePadding = 1024,
    _SpanAvailWidth = 2048,
    _SpanFullWidth = 4096,
    _NavLeftJumpsBackHere = 8192,
    _CollapsingHeader = 26,
};

pub const ImGuiPopupFlags = enum(c_int) {
    _None = 0,
    _MouseButtonLeft = 0,
    _MouseButtonRight = 1,
    _MouseButtonMiddle = 2,
    _MouseButtonMask_ = 31,
    _MouseButtonDefault_ = 1,
    _NoOpenOverExistingPopup = 32,
    _NoOpenOverItems = 64,
    _AnyPopupId = 128,
    _AnyPopupLevel = 256,
    _AnyPopup = 384,
};

pub const ImGuiSelectableFlags = enum(c_int) {
    _None = 0,
    _DontClosePopups = 1,
    _SpanAllColumns = 2,
    _AllowDoubleClick = 4,
    _Disabled = 8,
    _AllowItemOverlap = 16,
};

pub const ImGuiComboFlags = enum(c_int) {
    _None = 0,
    _PopupAlignLeft = 1,
    _HeightSmall = 2,
    _HeightRegular = 4,
    _HeightLarge = 8,
    _HeightLargest = 16,
    _NoArrowButton = 32,
    _NoPreview = 64,
    _HeightMask_ = 30,
};

pub const ImGuiTabBarFlags = enum(c_int) {
    _None = 0,
    _Reorderable = 1,
    _AutoSelectNewTabs = 2,
    _TabListPopupButton = 4,
    _NoCloseWithMiddleMouseButton = 8,
    _NoTabListScrollingButtons = 16,
    _NoTooltip = 32,
    _FittingPolicyResizeDown = 64,
    _FittingPolicyScroll = 128,
    _FittingPolicyMask_ = 192,
    _FittingPolicyDefault_ = 64,
};

pub const ImGuiTabItemFlags = enum(c_int) {
    _None = 0,
    _UnsavedDocument = 1,
    _SetSelected = 2,
    _NoCloseWithMiddleMouseButton = 4,
    _NoPushId = 8,
    _NoTooltip = 16,
    _NoReorder = 32,
    _Leading = 64,
    _Trailing = 128,
};

pub const ImGuiTableFlags = enum(c_int) {
    _None = 0,
    _Resizable = 1,
    _Reorderable = 2,
    _Hideable = 4,
    _Sortable = 8,
    _NoSavedSettings = 16,
    _ContextMenuInBody = 32,
    _RowBg = 64,
    _BordersInnerH = 128,
    _BordersOuterH = 256,
    _BordersInnerV = 512,
    _BordersOuterV = 1024,
    _BordersH = 384,
    _BordersV = 1536,
    _BordersInner = 640,
    _BordersOuter = 1280,
    _Borders = 1920,
    _NoBordersInBody = 2048,
    _NoBordersInBodyUntilResize = 4096,
    _SizingFixedFit = 8192,
    _SizingFixedSame = 16384,
    _SizingStretchProp = 24576,
    _SizingStretchSame = 32768,
    _NoHostExtendX = 65536,
    _NoHostExtendY = 131072,
    _NoKeepColumnsVisible = 262144,
    _PreciseWidths = 524288,
    _NoClip = 1048576,
    _PadOuterX = 2097152,
    _NoPadOuterX = 4194304,
    _NoPadInnerX = 8388608,
    _ScrollX = 16777216,
    _ScrollY = 33554432,
    _SortMulti = 67108864,
    _SortTristate = 134217728,
    _SizingMask_ = 57344,
};

pub const ImGuiTableColumnFlags = enum(c_int) {
    _None = 0,
    _Disabled = 1,
    _DefaultHide = 2,
    _DefaultSort = 4,
    _WidthStretch = 8,
    _WidthFixed = 16,
    _NoResize = 32,
    _NoReorder = 64,
    _NoHide = 128,
    _NoClip = 256,
    _NoSort = 512,
    _NoSortAscending = 1024,
    _NoSortDescending = 2048,
    _NoHeaderLabel = 4096,
    _NoHeaderWidth = 8192,
    _PreferSortAscending = 16384,
    _PreferSortDescending = 32768,
    _IndentEnable = 65536,
    _IndentDisable = 131072,
    _IsEnabled = 16777216,
    _IsVisible = 33554432,
    _IsSorted = 67108864,
    _IsHovered = 134217728,
    _WidthMask_ = 24,
    _IndentMask_ = 196608,
    _StatusMask_ = 251658240,
    _NoDirectResize_ = 1073741824,
};

pub const ImGuiTableRowFlags = enum(c_int) {
    _None = 0,
    _Headers = 1,
};

pub const ImGuiTableBgTarget = enum(c_int) {
    _None = 0,
    _RowBg0 = 1,
    _RowBg1 = 2,
    _CellBg = 3,
};

pub const ImGuiFocusedFlags = enum(c_int) {
    _None = 0,
    _ChildWindows = 1,
    _RootWindow = 2,
    _AnyWindow = 4,
    _NoPopupHierarchy = 8,
    _DockHierarchy = 16,
    _RootAndChildWindows = 3,
};

pub const ImGuiHoveredFlags = enum(c_int) {
    _None = 0,
    _ChildWindows = 1,
    _RootWindow = 2,
    _AnyWindow = 4,
    _NoPopupHierarchy = 8,
    _DockHierarchy = 16,
    _AllowWhenBlockedByPopup = 32,
    _AllowWhenBlockedByActiveItem = 128,
    _AllowWhenOverlapped = 256,
    _AllowWhenDisabled = 512,
    _NoNavOverride = 1024,
    _RectOnly = 416,
    _RootAndChildWindows = 3,
};

pub const ImGuiDockNodeFlags = enum(c_int) {
    _None = 0,
    _KeepAliveOnly = 1,
    _NoDockingInCentralNode = 4,
    _PassthruCentralNode = 8,
    _NoSplit = 16,
    _NoResize = 32,
    _AutoHideTabBar = 64,
};

pub const ImGuiDragDropFlags = enum(c_int) {
    _None = 0,
    _SourceNoPreviewTooltip = 1,
    _SourceNoDisableHover = 2,
    _SourceNoHoldToOpenOthers = 4,
    _SourceAllowNullID = 8,
    _SourceExtern = 16,
    _SourceAutoExpirePayload = 32,
    _AcceptBeforeDelivery = 1024,
    _AcceptNoDrawDefaultRect = 2048,
    _AcceptNoPreviewTooltip = 4096,
    _AcceptPeekOnly = 3072,
};

pub const ImGuiDataType = enum(c_int) {
    _S8 = 0,
    _U8 = 1,
    _S16 = 2,
    _U16 = 3,
    _S32 = 4,
    _U32 = 5,
    _S64 = 6,
    _U64 = 7,
    _Float = 8,
    _Double = 9,
    _COUNT = 10,
};

pub const ImGuiDir = enum(c_int) {
    _None = -1,
    _Left = 0,
    _Right = 1,
    _Up = 2,
    _Down = 3,
    _COUNT = 4,
};

pub const ImGuiSortDirection = enum(c_int) {
    _None = 0,
    _Ascending = 1,
    _Descending = 2,
};

pub const ImGuiKey = enum(c_int) {
    _None = 0,
    _Tab = 512,
    _LeftArrow = 513,
    _RightArrow = 514,
    _UpArrow = 515,
    _DownArrow = 516,
    _PageUp = 517,
    _PageDown = 518,
    _Home = 519,
    _End = 520,
    _Insert = 521,
    _Delete = 522,
    _Backspace = 523,
    _Space = 524,
    _Enter = 525,
    _Escape = 526,
    _LeftCtrl = 527,
    _LeftShift = 528,
    _LeftAlt = 529,
    _LeftSuper = 530,
    _RightCtrl = 531,
    _RightShift = 532,
    _RightAlt = 533,
    _RightSuper = 534,
    _Menu = 535,
    _0 = 536,
    _1 = 537,
    _2 = 538,
    _3 = 539,
    _4 = 540,
    _5 = 541,
    _6 = 542,
    _7 = 543,
    _8 = 544,
    _9 = 545,
    _A = 546,
    _B = 547,
    _C = 548,
    _D = 549,
    _E = 550,
    _F = 551,
    _G = 552,
    _H = 553,
    _I = 554,
    _J = 555,
    _K = 556,
    _L = 557,
    _M = 558,
    _N = 559,
    _O = 560,
    _P = 561,
    _Q = 562,
    _R = 563,
    _S = 564,
    _T = 565,
    _U = 566,
    _V = 567,
    _W = 568,
    _X = 569,
    _Y = 570,
    _Z = 571,
    _F1 = 572,
    _F2 = 573,
    _F3 = 574,
    _F4 = 575,
    _F5 = 576,
    _F6 = 577,
    _F7 = 578,
    _F8 = 579,
    _F9 = 580,
    _F10 = 581,
    _F11 = 582,
    _F12 = 583,
    _Apostrophe = 584,
    _Comma = 585,
    _Minus = 586,
    _Period = 587,
    _Slash = 588,
    _Semicolon = 589,
    _Equal = 590,
    _LeftBracket = 591,
    _Backslash = 592,
    _RightBracket = 593,
    _GraveAccent = 594,
    _CapsLock = 595,
    _ScrollLock = 596,
    _NumLock = 597,
    _PrintScreen = 598,
    _Pause = 599,
    _Keypad0 = 600,
    _Keypad1 = 601,
    _Keypad2 = 602,
    _Keypad3 = 603,
    _Keypad4 = 604,
    _Keypad5 = 605,
    _Keypad6 = 606,
    _Keypad7 = 607,
    _Keypad8 = 608,
    _Keypad9 = 609,
    _KeypadDecimal = 610,
    _KeypadDivide = 611,
    _KeypadMultiply = 612,
    _KeypadSubtract = 613,
    _KeypadAdd = 614,
    _KeypadEnter = 615,
    _KeypadEqual = 616,
    _GamepadStart = 617,
    _GamepadBack = 618,
    _GamepadFaceLeft = 619,
    _GamepadFaceRight = 620,
    _GamepadFaceUp = 621,
    _GamepadFaceDown = 622,
    _GamepadDpadLeft = 623,
    _GamepadDpadRight = 624,
    _GamepadDpadUp = 625,
    _GamepadDpadDown = 626,
    _GamepadL1 = 627,
    _GamepadR1 = 628,
    _GamepadL2 = 629,
    _GamepadR2 = 630,
    _GamepadL3 = 631,
    _GamepadR3 = 632,
    _GamepadLStickLeft = 633,
    _GamepadLStickRight = 634,
    _GamepadLStickUp = 635,
    _GamepadLStickDown = 636,
    _GamepadRStickLeft = 637,
    _GamepadRStickRight = 638,
    _GamepadRStickUp = 639,
    _GamepadRStickDown = 640,
    _ModCtrl = 641,
    _ModShift = 642,
    _ModAlt = 643,
    _ModSuper = 644,
    _MouseLeft = 645,
    _MouseRight = 646,
    _MouseMiddle = 647,
    _MouseX1 = 648,
    _MouseX2 = 649,
    _MouseWheelX = 650,
    _MouseWheelY = 651,
    _COUNT = 652,
    _NamedKey_BEGIN = 512,
    _NamedKey_END = 652,
    _NamedKey_COUNT = 140,
    _KeysData_SIZE = 652,
    _KeysData_OFFSET = 0,
    _KeyPadEnter = 615,
};

pub const ImGuiModFlags = enum(c_int) {
    _None = 0,
    _Ctrl = 1,
    _Shift = 2,
    _Alt = 4,
    _Super = 8,
    _All = 15,
};

pub const ImGuiNavInput = enum(c_int) {
    _Activate = 0,
    _Cancel = 1,
    _Input = 2,
    _Menu = 3,
    _DpadLeft = 4,
    _DpadRight = 5,
    _DpadUp = 6,
    _DpadDown = 7,
    _LStickLeft = 8,
    _LStickRight = 9,
    _LStickUp = 10,
    _LStickDown = 11,
    _FocusPrev = 12,
    _FocusNext = 13,
    _TweakSlow = 14,
    _TweakFast = 15,
    _COUNT = 16,
};

pub const ImGuiConfigFlags = enum(c_int) {
    _None = 0,
    _NavEnableKeyboard = 1,
    _NavEnableGamepad = 2,
    _NavEnableSetMousePos = 4,
    _NavNoCaptureKeyboard = 8,
    _NoMouse = 16,
    _NoMouseCursorChange = 32,
    _DockingEnable = 64,
    _ViewportsEnable = 1024,
    _DpiEnableScaleViewports = 16384,
    _DpiEnableScaleFonts = 32768,
    _IsSRGB = 1048576,
    _IsTouchScreen = 2097152,
};

pub const ImGuiBackendFlags = enum(c_int) {
    _None = 0,
    _HasGamepad = 1,
    _HasMouseCursors = 2,
    _HasSetMousePos = 4,
    _RendererHasVtxOffset = 8,
    _PlatformHasViewports = 1024,
    _HasMouseHoveredViewport = 2048,
    _RendererHasViewports = 4096,
};

pub const ImGuiCol = enum(c_int) {
    _Text = 0,
    _TextDisabled = 1,
    _WindowBg = 2,
    _ChildBg = 3,
    _PopupBg = 4,
    _Border = 5,
    _BorderShadow = 6,
    _FrameBg = 7,
    _FrameBgHovered = 8,
    _FrameBgActive = 9,
    _TitleBg = 10,
    _TitleBgActive = 11,
    _TitleBgCollapsed = 12,
    _MenuBarBg = 13,
    _ScrollbarBg = 14,
    _ScrollbarGrab = 15,
    _ScrollbarGrabHovered = 16,
    _ScrollbarGrabActive = 17,
    _CheckMark = 18,
    _SliderGrab = 19,
    _SliderGrabActive = 20,
    _Button = 21,
    _ButtonHovered = 22,
    _ButtonActive = 23,
    _Header = 24,
    _HeaderHovered = 25,
    _HeaderActive = 26,
    _Separator = 27,
    _SeparatorHovered = 28,
    _SeparatorActive = 29,
    _ResizeGrip = 30,
    _ResizeGripHovered = 31,
    _ResizeGripActive = 32,
    _Tab = 33,
    _TabHovered = 34,
    _TabActive = 35,
    _TabUnfocused = 36,
    _TabUnfocusedActive = 37,
    _DockingPreview = 38,
    _DockingEmptyBg = 39,
    _PlotLines = 40,
    _PlotLinesHovered = 41,
    _PlotHistogram = 42,
    _PlotHistogramHovered = 43,
    _TableHeaderBg = 44,
    _TableBorderStrong = 45,
    _TableBorderLight = 46,
    _TableRowBg = 47,
    _TableRowBgAlt = 48,
    _TextSelectedBg = 49,
    _DragDropTarget = 50,
    _NavHighlight = 51,
    _NavWindowingHighlight = 52,
    _NavWindowingDimBg = 53,
    _ModalWindowDimBg = 54,
    _COUNT = 55,
};

pub const ImGuiStyleVar = enum(c_int) {
    _Alpha = 0,
    _DisabledAlpha = 1,
    _WindowPadding = 2,
    _WindowRounding = 3,
    _WindowBorderSize = 4,
    _WindowMinSize = 5,
    _WindowTitleAlign = 6,
    _ChildRounding = 7,
    _ChildBorderSize = 8,
    _PopupRounding = 9,
    _PopupBorderSize = 10,
    _FramePadding = 11,
    _FrameRounding = 12,
    _FrameBorderSize = 13,
    _ItemSpacing = 14,
    _ItemInnerSpacing = 15,
    _IndentSpacing = 16,
    _CellPadding = 17,
    _ScrollbarSize = 18,
    _ScrollbarRounding = 19,
    _GrabMinSize = 20,
    _GrabRounding = 21,
    _TabRounding = 22,
    _ButtonTextAlign = 23,
    _SelectableTextAlign = 24,
    _COUNT = 25,
};

pub const ImGuiButtonFlags = enum(c_int) {
    _None = 0,
    _MouseButtonLeft = 1,
    _MouseButtonRight = 2,
    _MouseButtonMiddle = 4,
    _MouseButtonMask_ = 7,
    _MouseButtonDefault_ = 1,
};

pub const ImGuiColorEditFlags = enum(c_int) {
    _None = 0,
    _NoAlpha = 2,
    _NoPicker = 4,
    _NoOptions = 8,
    _NoSmallPreview = 16,
    _NoInputs = 32,
    _NoTooltip = 64,
    _NoLabel = 128,
    _NoSidePreview = 256,
    _NoDragDrop = 512,
    _NoBorder = 1024,
    _AlphaBar = 65536,
    _AlphaPreview = 131072,
    _AlphaPreviewHalf = 262144,
    _HDR = 524288,
    _DisplayRGB = 1048576,
    _DisplayHSV = 2097152,
    _DisplayHex = 4194304,
    _Uint8 = 8388608,
    _Float = 16777216,
    _PickerHueBar = 33554432,
    _PickerHueWheel = 67108864,
    _InputRGB = 134217728,
    _InputHSV = 268435456,
    _DefaultOptions_ = 177209344,
    _DisplayMask_ = 7340032,
    _DataTypeMask_ = 25165824,
    _PickerMask_ = 100663296,
    _InputMask_ = 402653184,
};

pub const ImGuiSliderFlags = enum(c_int) {
    _None = 0,
    _AlwaysClamp = 16,
    _Logarithmic = 32,
    _NoRoundToFormat = 64,
    _NoInput = 128,
    _InvalidMask_ = 1879048207,
    _ClampOnInput = 16,
};

pub const ImGuiMouseButton = enum(c_int) {
    _Left = 0,
    _Right = 1,
    _Middle = 2,
    _COUNT = 5,
};

pub const ImGuiMouseCursor = enum(c_int) {
    _None = -1,
    _Arrow = 0,
    _TextInput = 1,
    _ResizeAll = 2,
    _ResizeNS = 3,
    _ResizeEW = 4,
    _ResizeNESW = 5,
    _ResizeNWSE = 6,
    _Hand = 7,
    _NotAllowed = 8,
    _COUNT = 9,
};

pub const ImGuiCond = enum(c_int) {
    _None = 0,
    _Always = 1,
    _Once = 2,
    _FirstUseEver = 4,
    _Appearing = 8,
};

pub const ImDrawFlags = enum(c_int) {
    _None = 0,
    _Closed = 1,
    _RoundCornersTopLeft = 16,
    _RoundCornersTopRight = 32,
    _RoundCornersBottomLeft = 64,
    _RoundCornersBottomRight = 128,
    _RoundCornersNone = 256,
    _RoundCornersTop = 48,
    _RoundCornersBottom = 192,
    _RoundCornersLeft = 80,
    _RoundCornersRight = 160,
    _RoundCornersAll = 240,
    _RoundCornersDefault_ = 240,
    _RoundCornersMask_ = 496,
};

pub const ImDrawListFlags = enum(c_int) {
    _None = 0,
    _AntiAliasedLines = 1,
    _AntiAliasedLinesUseTex = 2,
    _AntiAliasedFill = 4,
    _AllowVtxOffset = 8,
};

pub const ImFontAtlasFlags = enum(c_int) {
    _None = 0,
    _NoPowerOfTwoHeight = 1,
    _NoMouseCursors = 2,
    _NoBakedLines = 4,
};

pub const ImGuiViewportFlags = enum(c_int) {
    _None = 0,
    _IsPlatformWindow = 1,
    _IsPlatformMonitor = 2,
    _OwnedByApp = 4,
    _NoDecoration = 8,
    _NoTaskBarIcon = 16,
    _NoFocusOnAppearing = 32,
    _NoFocusOnClick = 64,
    _NoInputs = 128,
    _NoRendererClear = 256,
    _TopMost = 512,
    _Minimized = 1024,
    _NoAutoMerge = 2048,
    _CanHostOtherWindows = 4096,
};

pub const ImDrawCornerFlags = enum(c_int) {
    _None = 256,
    _TopLeft = 16,
    _TopRight = 32,
    _BotLeft = 64,
    _BotRight = 128,
    _All = 240,
    _Top = 48,
    _Bot = 192,
    _Left = 80,
    _Right = 160,
};

pub const ImGuiKeyModFlags = enum(c_int) {
    _None = 0,
    _Ctrl = 1,
    _Shift = 2,
    _Alt = 4,
    _Super = 8,
};

pub const ImDrawListSharedData = opaque {};
pub const ImFontBuilderIO = opaque {};
pub const ImGuiContext = opaque {};
const ImGuiInputTextCallback = fn (data: ?*ImGuiInputTextCallbackData) callconv(.C) c_int;
const ImGuiSizeCallback = fn (data: ?*ImGuiSizeCallbackData) callconv(.C) void;
const ImGuiMemAllocFunc = fn (sz: usize, user_data: ?*anyopaque) callconv(.C) ?*anyopaque;
const ImGuiMemFreeFunc = fn (ptr: ?*anyopaque, user_data: ?*anyopaque) callconv(.C) void;
pub const ImVec2 = extern struct {
    x: f32,
    y: f32,
};

test "sizeof ImVec2" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImVec2) == 8);
}

pub const ImVec4 = extern struct {
    x: f32,
    y: f32,
    z: f32,
    w: f32,
};

test "sizeof ImVec4" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImVec4) == 16);
}

pub const ImNewWrapper = opaque {};
pub const ImGuiStyle = extern struct {
    Alpha: f32,
    DisabledAlpha: f32,
    WindowPadding: ImVec2,
    WindowRounding: f32,
    WindowBorderSize: f32,
    WindowMinSize: ImVec2,
    WindowTitleAlign: ImVec2,
    WindowMenuButtonPosition: c_int,
    ChildRounding: f32,
    ChildBorderSize: f32,
    PopupRounding: f32,
    PopupBorderSize: f32,
    FramePadding: ImVec2,
    FrameRounding: f32,
    FrameBorderSize: f32,
    ItemSpacing: ImVec2,
    ItemInnerSpacing: ImVec2,
    CellPadding: ImVec2,
    TouchExtraPadding: ImVec2,
    IndentSpacing: f32,
    ColumnsMinSpacing: f32,
    ScrollbarSize: f32,
    ScrollbarRounding: f32,
    GrabMinSize: f32,
    GrabRounding: f32,
    LogSliderDeadzone: f32,
    TabRounding: f32,
    TabBorderSize: f32,
    TabMinWidthForCloseButton: f32,
    ColorButtonPosition: c_int,
    ButtonTextAlign: ImVec2,
    SelectableTextAlign: ImVec2,
    DisplayWindowPadding: ImVec2,
    DisplaySafeAreaPadding: ImVec2,
    MouseCursorScale: f32,
    AntiAliasedLines: bool,
    AntiAliasedLinesUseTex: bool,
    AntiAliasedFill: bool,
    CurveTessellationTol: f32,
    CircleTessellationMaxError: f32,
    Colors: [55]ImVec4,
};

test "sizeof ImGuiStyle" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiStyle) == 1080);
}

pub const ImGuiKeyData = extern struct {
    Down: bool,
    DownDuration: f32,
    DownDurationPrev: f32,
    AnalogValue: f32,
};

test "sizeof ImGuiKeyData" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiKeyData) == 16);
}

extern fn _ZN7ImGuiIO11AddKeyEventEib(self: * ImGuiIO, key: c_int, down: bool) void;
extern fn _ZN7ImGuiIO17AddKeyAnalogEventEibf(self: * ImGuiIO, key: c_int, down: bool, v: f32) void;
extern fn _ZN7ImGuiIO16AddMousePosEventEff(self: * ImGuiIO, x: f32, y: f32) void;
extern fn _ZN7ImGuiIO19AddMouseButtonEventEib(self: * ImGuiIO, button: c_int, down: bool) void;
extern fn _ZN7ImGuiIO18AddMouseWheelEventEff(self: * ImGuiIO, wh_x: f32, wh_y: f32) void;
extern fn _ZN7ImGuiIO21AddMouseViewportEventEj(self: * ImGuiIO, _id: c_uint) void;
extern fn _ZN7ImGuiIO13AddFocusEventEb(self: * ImGuiIO, focused: bool) void;
extern fn _ZN7ImGuiIO17AddInputCharacterEj(self: * ImGuiIO, c: c_uint) void;
extern fn _ZN7ImGuiIO22AddInputCharacterUTF16Et(self: * ImGuiIO, c: c_ushort) void;
extern fn _ZN7ImGuiIO22AddInputCharactersUTF8EPKc(self: * ImGuiIO, str: ?[*:0]const u8) void;
extern fn _ZN7ImGuiIO21SetKeyEventNativeDataEiiii(self: * ImGuiIO, key: c_int, native_keycode: c_int, native_scancode: c_int, native_legacy_index: c_int) void;
extern fn _ZN7ImGuiIO21SetAppAcceptingEventsEb(self: * ImGuiIO, accepting_events: bool) void;
extern fn _ZN7ImGuiIO20ClearInputCharactersEv(self: * ImGuiIO) void;
extern fn _ZN7ImGuiIO14ClearInputKeysEv(self: * ImGuiIO) void;
pub const ImGuiIO = extern struct {
    ConfigFlags: c_int,
    BackendFlags: c_int,
    DisplaySize: ImVec2,
    DeltaTime: f32,
    IniSavingRate: f32,
    IniFilename: ?[*:0]const u8,
    LogFilename: ?[*:0]const u8,
    MouseDoubleClickTime: f32,
    MouseDoubleClickMaxDist: f32,
    MouseDragThreshold: f32,
    KeyRepeatDelay: f32,
    KeyRepeatRate: f32,
    UserData: ?*anyopaque,
    Fonts: ?*ImFontAtlas,
    FontGlobalScale: f32,
    FontAllowUserScaling: bool,
    FontDefault: ?*ImFont,
    DisplayFramebufferScale: ImVec2,
    ConfigDockingNoSplit: bool,
    ConfigDockingWithShift: bool,
    ConfigDockingAlwaysTabBar: bool,
    ConfigDockingTransparentPayload: bool,
    ConfigViewportsNoAutoMerge: bool,
    ConfigViewportsNoTaskBarIcon: bool,
    ConfigViewportsNoDecoration: bool,
    ConfigViewportsNoDefaultParent: bool,
    MouseDrawCursor: bool,
    ConfigMacOSXBehaviors: bool,
    ConfigInputTrickleEventQueue: bool,
    ConfigInputTextCursorBlink: bool,
    ConfigInputTextEnterKeepActive: bool,
    ConfigDragClickToInputText: bool,
    ConfigWindowsResizeFromEdges: bool,
    ConfigWindowsMoveFromTitleBarOnly: bool,
    ConfigMemoryCompactTimer: f32,
    BackendPlatformName: ?[*:0]const u8,
    BackendRendererName: ?[*:0]const u8,
    BackendPlatformUserData: ?*anyopaque,
    BackendRendererUserData: ?*anyopaque,
    BackendLanguageUserData: ?*anyopaque,
    GetClipboardTextFn: ?*const fn (user_data: ?*anyopaque) ?[*:0]const u8,
    SetClipboardTextFn: ?*const fn (user_data: ?*anyopaque, text: ?[*:0]const u8) void,
    ClipboardUserData: ?*anyopaque,
    SetPlatformImeDataFn: ?*const fn (viewport: ?*ImGuiViewport, data: ?*ImGuiPlatformImeData) void,
    ImeWindowHandle: ?*anyopaque,
    WantCaptureMouse: bool,
    WantCaptureKeyboard: bool,
    WantTextInput: bool,
    WantSetMousePos: bool,
    WantSaveIniSettings: bool,
    NavActive: bool,
    NavVisible: bool,
    Framerate: f32,
    MetricsRenderVertices: c_int,
    MetricsRenderIndices: c_int,
    MetricsRenderWindows: c_int,
    MetricsActiveWindows: c_int,
    MetricsActiveAllocations: c_int,
    MouseDelta: ImVec2,
    KeyMap: [652]c_int,
    KeysDown: [652]bool,
    NavInputs: [16]f32,
    MousePos: ImVec2,
    MouseDown: [5]bool,
    MouseWheel: f32,
    MouseWheelH: f32,
    MouseHoveredViewport: c_uint,
    KeyCtrl: bool,
    KeyShift: bool,
    KeyAlt: bool,
    KeySuper: bool,
    KeyMods: c_int,
    KeysData: [652]ImGuiKeyData,
    WantCaptureMouseUnlessPopupClose: bool,
    MousePosPrev: ImVec2,
    MouseClickedPos: [5]ImVec2,
    MouseClickedTime: [5]f64,
    MouseClicked: [5]bool,
    MouseDoubleClicked: [5]bool,
    MouseClickedCount: [5]c_ushort,
    MouseClickedLastCount: [5]c_ushort,
    MouseReleased: [5]bool,
    MouseDownOwned: [5]bool,
    MouseDownOwnedUnlessPopupClose: [5]bool,
    MouseDownDuration: [5]f32,
    MouseDownDurationPrev: [5]f32,
    MouseDragMaxDistanceAbs: [5]ImVec2,
    MouseDragMaxDistanceSqr: [5]f32,
    PenPressure: f32,
    AppFocusLost: bool,
    AppAcceptingEvents: bool,
    BackendUsingLegacyKeyArrays: i8,
    BackendUsingLegacyNavInputArray: bool,
    InputQueueSurrogate: c_ushort,
    InputQueueCharacters: ImVector,
    pub fn AddKeyEvent(self: * ImGuiIO, key: c_int, down: bool) void
    {
        return _ZN7ImGuiIO11AddKeyEventEib(self, key, down);
    }
    pub fn AddKeyAnalogEvent(self: * ImGuiIO, key: c_int, down: bool, v: f32) void
    {
        return _ZN7ImGuiIO17AddKeyAnalogEventEibf(self, key, down, v);
    }
    pub fn AddMousePosEvent(self: * ImGuiIO, x: f32, y: f32) void
    {
        return _ZN7ImGuiIO16AddMousePosEventEff(self, x, y);
    }
    pub fn AddMouseButtonEvent(self: * ImGuiIO, button: c_int, down: bool) void
    {
        return _ZN7ImGuiIO19AddMouseButtonEventEib(self, button, down);
    }
    pub fn AddMouseWheelEvent(self: * ImGuiIO, wh_x: f32, wh_y: f32) void
    {
        return _ZN7ImGuiIO18AddMouseWheelEventEff(self, wh_x, wh_y);
    }
    pub fn AddMouseViewportEvent(self: * ImGuiIO, _id: c_uint) void
    {
        return _ZN7ImGuiIO21AddMouseViewportEventEj(self, _id);
    }
    pub fn AddFocusEvent(self: * ImGuiIO, focused: bool) void
    {
        return _ZN7ImGuiIO13AddFocusEventEb(self, focused);
    }
    pub fn AddInputCharacter(self: * ImGuiIO, c: c_uint) void
    {
        return _ZN7ImGuiIO17AddInputCharacterEj(self, c);
    }
    pub fn AddInputCharacterUTF16(self: * ImGuiIO, c: c_ushort) void
    {
        return _ZN7ImGuiIO22AddInputCharacterUTF16Et(self, c);
    }
    pub fn AddInputCharactersUTF8(self: * ImGuiIO, str: ?[*:0]const u8) void
    {
        return _ZN7ImGuiIO22AddInputCharactersUTF8EPKc(self, str);
    }
    pub fn SetKeyEventNativeData(self: * ImGuiIO, key: c_int, native_keycode: c_int, native_scancode: c_int, __default: struct{native_legacy_index: c_int= -1}) void
    {
        return _ZN7ImGuiIO21SetKeyEventNativeDataEiiii(self, key, native_keycode, native_scancode, __default.native_legacy_index);
    }
    pub fn SetAppAcceptingEvents(self: * ImGuiIO, accepting_events: bool) void
    {
        return _ZN7ImGuiIO21SetAppAcceptingEventsEb(self, accepting_events);
    }
    pub fn ClearInputCharacters(self: * ImGuiIO) void
    {
        return _ZN7ImGuiIO20ClearInputCharactersEv(self);
    }
    pub fn ClearInputKeys(self: * ImGuiIO) void
    {
        return _ZN7ImGuiIO14ClearInputKeysEv(self);
    }
};

pub const ImGuiInputTextCallbackData = extern struct {
    EventFlag: c_int,
    Flags: c_int,
    UserData: ?*anyopaque,
    EventChar: ImWchar,
    EventKey: c_int,
    Buf: ?*i8,
    BufTextLen: c_int,
    BufSize: c_int,
    BufDirty: bool,
    CursorPos: c_int,
    SelectionStart: c_int,
    SelectionEnd: c_int,
};

test "sizeof ImGuiInputTextCallbackData" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiInputTextCallbackData) == 56);
}

pub const ImGuiSizeCallbackData = extern struct {
    UserData: ?*anyopaque,
    Pos: ImVec2,
    CurrentSize: ImVec2,
    DesiredSize: ImVec2,
};

test "sizeof ImGuiSizeCallbackData" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiSizeCallbackData) == 32);
}

pub const ImGuiWindowClass = extern struct {
    ClassId: c_uint,
    ParentViewportId: c_uint,
    ViewportFlagsOverrideSet: c_int,
    ViewportFlagsOverrideClear: c_int,
    TabItemFlagsOverrideSet: c_int,
    DockNodeFlagsOverrideSet: c_int,
    DockingAlwaysTabBar: bool,
    DockingAllowUnclassed: bool,
};

test "sizeof ImGuiWindowClass" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiWindowClass) == 28);
}

pub const ImGuiPayload = extern struct {
    Data: ?*anyopaque,
    DataSize: c_int,
    SourceId: c_uint,
    SourceParentId: c_uint,
    DataFrameCount: c_int,
    DataType: [33]i8,
    Preview: bool,
    Delivery: bool,
};

test "sizeof ImGuiPayload" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiPayload) == 64);
}

pub const ImGuiTableColumnSortSpecs = packed struct {
    ColumnUserID: c_uint,
    ColumnIndex: c_short,
    SortOrder: c_short,
    SortDirection: u8,
};

test "sizeof ImGuiTableColumnSortSpecs" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiTableColumnSortSpecs) == 12);
}

pub const ImGuiTableSortSpecs = extern struct {
    Specs: ?*ImGuiTableColumnSortSpecs,
    SpecsCount: c_int,
    SpecsDirty: bool,
};

test "sizeof ImGuiTableSortSpecs" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiTableSortSpecs) == 16);
}

pub const ImGuiOnceUponAFrame = extern struct {
    RefFrame: c_int,
};

test "sizeof ImGuiOnceUponAFrame" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiOnceUponAFrame) == 4);
}

pub const ImGuiTextFilter = extern struct {
    InputBuf: [256]i8,
    Filters: ImVector,
    CountGrep: c_int,
};

pub const ImGuiTextBuffer = extern struct {
    Buf: ImVector,
};

pub const ImGuiStorage = extern struct {
    Data: ImVector,
};

pub const ImGuiListClipper = extern struct {
    DisplayStart: c_int,
    DisplayEnd: c_int,
    ItemsCount: c_int,
    ItemsHeight: f32,
    StartPosY: f32,
    TempData: ?*anyopaque,
};

test "sizeof ImGuiListClipper" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiListClipper) == 32);
}

pub const ImColor = extern struct {
    Value: ImVec4,
};

test "sizeof ImColor" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImColor) == 16);
}

const ImDrawCallback = fn (parent_list: ?*const ImDrawList, cmd: ?*const ImDrawCmd) callconv(.C) void;
pub const ImDrawCmd = extern struct {
    ClipRect: ImVec4,
    TextureId: ImTextureID,
    VtxOffset: c_uint,
    IdxOffset: c_uint,
    ElemCount: c_uint,
    UserCallback: ?*const ImDrawCallback,
    UserCallbackData: ?*anyopaque,
};

test "sizeof ImDrawCmd" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImDrawCmd) == 56);
}

pub const ImDrawVert = extern struct {
    pos: ImVec2,
    uv: ImVec2,
    col: c_uint,
};

test "sizeof ImDrawVert" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImDrawVert) == 20);
}

pub const ImDrawCmdHeader = extern struct {
    ClipRect: ImVec4,
    TextureId: ImTextureID,
    VtxOffset: c_uint,
};

test "sizeof ImDrawCmdHeader" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImDrawCmdHeader) == 32);
}

pub const ImDrawChannel = extern struct {
    _CmdBuffer: ImVector,
    _IdxBuffer: ImVector,
};

pub const ImDrawListSplitter = extern struct {
    _Current: c_int,
    _Count: c_int,
    _Channels: ImVector,
};

extern fn _ZN10ImDrawList12PushClipRectERK6ImVec2S2_b(self: * ImDrawList, clip_rect_min: *const ImVec2, clip_rect_max: *const ImVec2, intersect_with_current_clip_rect: bool) void;
extern fn _ZN10ImDrawList22PushClipRectFullScreenEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList11PopClipRectEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList13PushTextureIDEPv(self: * ImDrawList, texture_id: ImTextureID) void;
extern fn _ZN10ImDrawList12PopTextureIDEv(self: * ImDrawList) void;
extern fn _ZNK10ImDrawList14GetClipRectMinEv(self: * ImDrawList) ImVec2;
extern fn _ZNK10ImDrawList14GetClipRectMaxEv(self: * ImDrawList) ImVec2;
extern fn _ZN10ImDrawList7AddLineERK6ImVec2S2_jf(self: * ImDrawList, p1: *const ImVec2, p2: *const ImVec2, col: c_uint, thickness: f32) void;
extern fn _ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(self: * ImDrawList, p_min: *const ImVec2, p_max: *const ImVec2, col: c_uint, rounding: f32, flags: c_int, thickness: f32) void;
extern fn _ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(self: * ImDrawList, p_min: *const ImVec2, p_max: *const ImVec2, col: c_uint, rounding: f32, flags: c_int) void;
extern fn _ZN10ImDrawList23AddRectFilledMultiColorERK6ImVec2S2_jjjj(self: * ImDrawList, p_min: *const ImVec2, p_max: *const ImVec2, col_upr_left: c_uint, col_upr_right: c_uint, col_bot_right: c_uint, col_bot_left: c_uint) void;
extern fn _ZN10ImDrawList7AddQuadERK6ImVec2S2_S2_S2_jf(self: * ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, col: c_uint, thickness: f32) void;
extern fn _ZN10ImDrawList13AddQuadFilledERK6ImVec2S2_S2_S2_j(self: * ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList11AddTriangleERK6ImVec2S2_S2_jf(self: * ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, col: c_uint, thickness: f32) void;
extern fn _ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j(self: * ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList9AddCircleERK6ImVec2fjif(self: * ImDrawList, center: *const ImVec2, radius: f32, col: c_uint, num_segments: c_int, thickness: f32) void;
extern fn _ZN10ImDrawList15AddCircleFilledERK6ImVec2fji(self: * ImDrawList, center: *const ImVec2, radius: f32, col: c_uint, num_segments: c_int) void;
extern fn _ZN10ImDrawList7AddNgonERK6ImVec2fjif(self: * ImDrawList, center: *const ImVec2, radius: f32, col: c_uint, num_segments: c_int, thickness: f32) void;
extern fn _ZN10ImDrawList13AddNgonFilledERK6ImVec2fji(self: * ImDrawList, center: *const ImVec2, radius: f32, col: c_uint, num_segments: c_int) void;
extern fn _ZN10ImDrawList7AddTextERK6ImVec2jPKcS4_(self: * ImDrawList, pos: *const ImVec2, col: c_uint, text_begin: ?[*:0]const u8, text_end: ?[*:0]const u8) void;
extern fn _ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(self: * ImDrawList, font: ?*const ImFont, font_size: f32, pos: *const ImVec2, col: c_uint, text_begin: ?[*:0]const u8, text_end: ?[*:0]const u8, wrap_width: f32, cpu_fine_clip_rect: ?*const ImVec4) void;
extern fn _ZN10ImDrawList11AddPolylineEPK6ImVec2ijif(self: * ImDrawList, points: ?*const ImVec2, num_points: c_int, col: c_uint, flags: c_int, thickness: f32) void;
extern fn _ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij(self: * ImDrawList, points: ?*const ImVec2, num_points: c_int, col: c_uint) void;
extern fn _ZN10ImDrawList14AddBezierCubicERK6ImVec2S2_S2_S2_jfi(self: * ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, col: c_uint, thickness: f32, num_segments: c_int) void;
extern fn _ZN10ImDrawList18AddBezierQuadraticERK6ImVec2S2_S2_jfi(self: * ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, col: c_uint, thickness: f32, num_segments: c_int) void;
extern fn _ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j(self: * ImDrawList, user_texture_id: ImTextureID, p_min: *const ImVec2, p_max: *const ImVec2, uv_min: *const ImVec2, uv_max: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList12AddImageQuadEPvRK6ImVec2S3_S3_S3_S3_S3_S3_S3_j(self: * ImDrawList, user_texture_id: ImTextureID, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, uv1: *const ImVec2, uv2: *const ImVec2, uv3: *const ImVec2, uv4: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList15AddImageRoundedEPvRK6ImVec2S3_S3_S3_jfi(self: * ImDrawList, user_texture_id: ImTextureID, p_min: *const ImVec2, p_max: *const ImVec2, uv_min: *const ImVec2, uv_max: *const ImVec2, col: c_uint, rounding: f32, flags: c_int) void;
extern fn _ZN10ImDrawList9PathClearEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList10PathLineToERK6ImVec2(self: * ImDrawList, pos: *const ImVec2) void;
extern fn _ZN10ImDrawList24PathLineToMergeDuplicateERK6ImVec2(self: * ImDrawList, pos: *const ImVec2) void;
extern fn _ZN10ImDrawList14PathFillConvexEj(self: * ImDrawList, col: c_uint) void;
extern fn _ZN10ImDrawList10PathStrokeEjif(self: * ImDrawList, col: c_uint, flags: c_int, thickness: f32) void;
extern fn _ZN10ImDrawList9PathArcToERK6ImVec2fffi(self: * ImDrawList, center: *const ImVec2, radius: f32, a_min: f32, a_max: f32, num_segments: c_int) void;
extern fn _ZN10ImDrawList13PathArcToFastERK6ImVec2fii(self: * ImDrawList, center: *const ImVec2, radius: f32, a_min_of_12: c_int, a_max_of_12: c_int) void;
extern fn _ZN10ImDrawList22PathBezierCubicCurveToERK6ImVec2S2_S2_i(self: * ImDrawList, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, num_segments: c_int) void;
extern fn _ZN10ImDrawList26PathBezierQuadraticCurveToERK6ImVec2S2_i(self: * ImDrawList, p2: *const ImVec2, p3: *const ImVec2, num_segments: c_int) void;
extern fn _ZN10ImDrawList8PathRectERK6ImVec2S2_fi(self: * ImDrawList, rect_min: *const ImVec2, rect_max: *const ImVec2, rounding: f32, flags: c_int) void;
extern fn _ZN10ImDrawList11AddCallbackEPFvPKS_PK9ImDrawCmdEPv(self: * ImDrawList, callback: *const ImDrawCallback, callback_data: ?*anyopaque) void;
extern fn _ZN10ImDrawList10AddDrawCmdEv(self: * ImDrawList) void;
extern fn _ZNK10ImDrawList11CloneOutputEv(self: * ImDrawList) ?*ImDrawList;
extern fn _ZN10ImDrawList13ChannelsSplitEi(self: * ImDrawList, count: c_int) void;
extern fn _ZN10ImDrawList13ChannelsMergeEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList18ChannelsSetCurrentEi(self: * ImDrawList, n: c_int) void;
extern fn _ZN10ImDrawList11PrimReserveEii(self: * ImDrawList, idx_count: c_int, vtx_count: c_int) void;
extern fn _ZN10ImDrawList13PrimUnreserveEii(self: * ImDrawList, idx_count: c_int, vtx_count: c_int) void;
extern fn _ZN10ImDrawList8PrimRectERK6ImVec2S2_j(self: * ImDrawList, a: *const ImVec2, b: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList10PrimRectUVERK6ImVec2S2_S2_S2_j(self: * ImDrawList, a: *const ImVec2, b: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList10PrimQuadUVERK6ImVec2S2_S2_S2_S2_S2_S2_S2_j(self: * ImDrawList, a: *const ImVec2, b: *const ImVec2, c: *const ImVec2, d: *const ImVec2, uv_a: *const ImVec2, uv_b: *const ImVec2, uv_c: *const ImVec2, uv_d: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList12PrimWriteVtxERK6ImVec2S2_j(self: * ImDrawList, pos: *const ImVec2, uv: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList12PrimWriteIdxEt(self: * ImDrawList, idx: c_ushort) void;
extern fn _ZN10ImDrawList7PrimVtxERK6ImVec2S2_j(self: * ImDrawList, pos: *const ImVec2, uv: *const ImVec2, col: c_uint) void;
extern fn _ZN10ImDrawList14AddBezierCurveERK6ImVec2S2_S2_S2_jfi(self: * ImDrawList, p1: *const ImVec2, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, col: c_uint, thickness: f32, num_segments: c_int) void;
extern fn _ZN10ImDrawList17PathBezierCurveToERK6ImVec2S2_S2_i(self: * ImDrawList, p2: *const ImVec2, p3: *const ImVec2, p4: *const ImVec2, num_segments: c_int) void;
extern fn _ZN10ImDrawList17_ResetForNewFrameEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList16_ClearFreeMemoryEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList17_PopUnusedDrawCmdEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList17_TryMergeDrawCmdsEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList18_OnChangedClipRectEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList19_OnChangedTextureIDEv(self: * ImDrawList) void;
extern fn _ZN10ImDrawList19_OnChangedVtxOffsetEv(self: * ImDrawList) void;
extern fn _ZNK10ImDrawList27_CalcCircleAutoSegmentCountEf(self: * ImDrawList, radius: f32) c_int;
extern fn _ZN10ImDrawList16_PathArcToFastExERK6ImVec2fiii(self: * ImDrawList, center: *const ImVec2, radius: f32, a_min_sample: c_int, a_max_sample: c_int, a_step: c_int) void;
extern fn _ZN10ImDrawList11_PathArcToNERK6ImVec2fffi(self: * ImDrawList, center: *const ImVec2, radius: f32, a_min: f32, a_max: f32, num_segments: c_int) void;
pub const ImDrawList = extern struct {
    CmdBuffer: ImVector,
    IdxBuffer: ImVector,
    VtxBuffer: ImVector,
    Flags: c_int,
    _VtxCurrentIdx: c_uint,
    _Data: ?*ImDrawListSharedData,
    _OwnerName: ?[*:0]const u8,
    _VtxWritePtr: ?*ImDrawVert,
    _IdxWritePtr: ?*c_ushort,
    _ClipRectStack: ImVector,
    _TextureIdStack: ImVector,
    _Path: ImVector,
    _CmdHeader: ImDrawCmdHeader,
    _Splitter: ImDrawListSplitter,
    _FringeScale: f32,
    pub fn PushClipRect(self: * ImDrawList, clip_rect_min: ImVec2, clip_rect_max: ImVec2, __default: struct{intersect_with_current_clip_rect: bool= false}) void
    {
        return _ZN10ImDrawList12PushClipRectERK6ImVec2S2_b(self, &clip_rect_min, &clip_rect_max, __default.intersect_with_current_clip_rect);
    }
    pub fn PushClipRectFullScreen(self: * ImDrawList) void
    {
        return _ZN10ImDrawList22PushClipRectFullScreenEv(self);
    }
    pub fn PopClipRect(self: * ImDrawList) void
    {
        return _ZN10ImDrawList11PopClipRectEv(self);
    }
    pub fn PushTextureID(self: * ImDrawList, texture_id: ImTextureID) void
    {
        return _ZN10ImDrawList13PushTextureIDEPv(self, texture_id);
    }
    pub fn PopTextureID(self: * ImDrawList) void
    {
        return _ZN10ImDrawList12PopTextureIDEv(self);
    }
    pub fn GetClipRectMin(self: * ImDrawList) ImVec2
    {
        return _ZNK10ImDrawList14GetClipRectMinEv(self);
    }
    pub fn GetClipRectMax(self: * ImDrawList) ImVec2
    {
        return _ZNK10ImDrawList14GetClipRectMaxEv(self);
    }
    pub fn AddLine(self: * ImDrawList, p1: ImVec2, p2: ImVec2, col: c_uint, __default: struct{thickness: f32= 1.0}) void
    {
        return _ZN10ImDrawList7AddLineERK6ImVec2S2_jf(self, &p1, &p2, col, __default.thickness);
    }
    pub fn AddRect(self: * ImDrawList, p_min: ImVec2, p_max: ImVec2, col: c_uint, __default: struct{rounding: f32= 0.0, flags: c_int= 0, thickness: f32= 1.0}) void
    {
        return _ZN10ImDrawList7AddRectERK6ImVec2S2_jfif(self, &p_min, &p_max, col, __default.rounding, __default.flags, __default.thickness);
    }
    pub fn AddRectFilled(self: * ImDrawList, p_min: ImVec2, p_max: ImVec2, col: c_uint, __default: struct{rounding: f32= 0.0, flags: c_int= 0}) void
    {
        return _ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi(self, &p_min, &p_max, col, __default.rounding, __default.flags);
    }
    pub fn AddRectFilledMultiColor(self: * ImDrawList, p_min: ImVec2, p_max: ImVec2, col_upr_left: c_uint, col_upr_right: c_uint, col_bot_right: c_uint, col_bot_left: c_uint) void
    {
        return _ZN10ImDrawList23AddRectFilledMultiColorERK6ImVec2S2_jjjj(self, &p_min, &p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
    }
    pub fn AddQuad(self: * ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: c_uint, __default: struct{thickness: f32= 1.0}) void
    {
        return _ZN10ImDrawList7AddQuadERK6ImVec2S2_S2_S2_jf(self, &p1, &p2, &p3, &p4, col, __default.thickness);
    }
    pub fn AddQuadFilled(self: * ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: c_uint) void
    {
        return _ZN10ImDrawList13AddQuadFilledERK6ImVec2S2_S2_S2_j(self, &p1, &p2, &p3, &p4, col);
    }
    pub fn AddTriangle(self: * ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: c_uint, __default: struct{thickness: f32= 1.0}) void
    {
        return _ZN10ImDrawList11AddTriangleERK6ImVec2S2_S2_jf(self, &p1, &p2, &p3, col, __default.thickness);
    }
    pub fn AddTriangleFilled(self: * ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: c_uint) void
    {
        return _ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j(self, &p1, &p2, &p3, col);
    }
    pub fn AddCircle(self: * ImDrawList, center: ImVec2, radius: f32, col: c_uint, __default: struct{num_segments: c_int= 0, thickness: f32= 1.0}) void
    {
        return _ZN10ImDrawList9AddCircleERK6ImVec2fjif(self, &center, radius, col, __default.num_segments, __default.thickness);
    }
    pub fn AddCircleFilled(self: * ImDrawList, center: ImVec2, radius: f32, col: c_uint, __default: struct{num_segments: c_int= 0}) void
    {
        return _ZN10ImDrawList15AddCircleFilledERK6ImVec2fji(self, &center, radius, col, __default.num_segments);
    }
    pub fn AddNgon(self: * ImDrawList, center: ImVec2, radius: f32, col: c_uint, num_segments: c_int, __default: struct{thickness: f32= 1.0}) void
    {
        return _ZN10ImDrawList7AddNgonERK6ImVec2fjif(self, &center, radius, col, num_segments, __default.thickness);
    }
    pub fn AddNgonFilled(self: * ImDrawList, center: ImVec2, radius: f32, col: c_uint, num_segments: c_int) void
    {
        return _ZN10ImDrawList13AddNgonFilledERK6ImVec2fji(self, &center, radius, col, num_segments);
    }
    pub fn AddText(self: * ImDrawList, pos: ImVec2, col: c_uint, text_begin: ?[*:0]const u8, __default: struct{text_end: ?[*:0]const u8= null}) void
    {
        return _ZN10ImDrawList7AddTextERK6ImVec2jPKcS4_(self, &pos, col, text_begin, __default.text_end);
    }
    pub fn AddText_2(self: * ImDrawList, font: ?*const ImFont, font_size: f32, pos: ImVec2, col: c_uint, text_begin: ?[*:0]const u8, __default: struct{text_end: ?[*:0]const u8= null, wrap_width: f32= 0.0, cpu_fine_clip_rect: ?*const ImVec4= null}) void
    {
        return _ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4(self, font, font_size, &pos, col, text_begin, __default.text_end, __default.wrap_width, __default.cpu_fine_clip_rect);
    }
    pub fn AddPolyline(self: * ImDrawList, points: ?*const ImVec2, num_points: c_int, col: c_uint, flags: c_int, thickness: f32) void
    {
        return _ZN10ImDrawList11AddPolylineEPK6ImVec2ijif(self, points, num_points, col, flags, thickness);
    }
    pub fn AddConvexPolyFilled(self: * ImDrawList, points: ?*const ImVec2, num_points: c_int, col: c_uint) void
    {
        return _ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij(self, points, num_points, col);
    }
    pub fn AddBezierCubic(self: * ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: c_uint, thickness: f32, __default: struct{num_segments: c_int= 0}) void
    {
        return _ZN10ImDrawList14AddBezierCubicERK6ImVec2S2_S2_S2_jfi(self, &p1, &p2, &p3, &p4, col, thickness, __default.num_segments);
    }
    pub fn AddBezierQuadratic(self: * ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: c_uint, thickness: f32, __default: struct{num_segments: c_int= 0}) void
    {
        return _ZN10ImDrawList18AddBezierQuadraticERK6ImVec2S2_S2_jfi(self, &p1, &p2, &p3, col, thickness, __default.num_segments);
    }
    pub fn AddImage(self: * ImDrawList, user_texture_id: ImTextureID, p_min: ImVec2, p_max: ImVec2, __default: struct{uv_min: ImVec2= .{.x=0, .y=0}, uv_max: ImVec2= ImVec2(1,1), col: c_uint= 0xFFFFFFFF}) void
    {
        return _ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j(self, user_texture_id, &p_min, &p_max, &__default.uv_min, &__default.uv_max, __default.col);
    }
    pub fn AddImageQuad(self: * ImDrawList, user_texture_id: ImTextureID, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, __default: struct{uv1: ImVec2= .{.x=0, .y=0}, uv2: ImVec2= ImVec2(1,0), uv3: ImVec2= ImVec2(1,1), uv4: ImVec2= ImVec2(0,1), col: c_uint= 0xFFFFFFFF}) void
    {
        return _ZN10ImDrawList12AddImageQuadEPvRK6ImVec2S3_S3_S3_S3_S3_S3_S3_j(self, user_texture_id, &p1, &p2, &p3, &p4, &__default.uv1, &__default.uv2, &__default.uv3, &__default.uv4, __default.col);
    }
    pub fn AddImageRounded(self: * ImDrawList, user_texture_id: ImTextureID, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2, uv_max: ImVec2, col: c_uint, rounding: f32, __default: struct{flags: c_int= 0}) void
    {
        return _ZN10ImDrawList15AddImageRoundedEPvRK6ImVec2S3_S3_S3_jfi(self, user_texture_id, &p_min, &p_max, &uv_min, &uv_max, col, rounding, __default.flags);
    }
    pub fn PathClear(self: * ImDrawList) void
    {
        return _ZN10ImDrawList9PathClearEv(self);
    }
    pub fn PathLineTo(self: * ImDrawList, pos: ImVec2) void
    {
        return _ZN10ImDrawList10PathLineToERK6ImVec2(self, &pos);
    }
    pub fn PathLineToMergeDuplicate(self: * ImDrawList, pos: ImVec2) void
    {
        return _ZN10ImDrawList24PathLineToMergeDuplicateERK6ImVec2(self, &pos);
    }
    pub fn PathFillConvex(self: * ImDrawList, col: c_uint) void
    {
        return _ZN10ImDrawList14PathFillConvexEj(self, col);
    }
    pub fn PathStroke(self: * ImDrawList, col: c_uint, __default: struct{flags: c_int= 0, thickness: f32= 1.0}) void
    {
        return _ZN10ImDrawList10PathStrokeEjif(self, col, __default.flags, __default.thickness);
    }
    pub fn PathArcTo(self: * ImDrawList, center: ImVec2, radius: f32, a_min: f32, a_max: f32, __default: struct{num_segments: c_int= 0}) void
    {
        return _ZN10ImDrawList9PathArcToERK6ImVec2fffi(self, &center, radius, a_min, a_max, __default.num_segments);
    }
    pub fn PathArcToFast(self: * ImDrawList, center: ImVec2, radius: f32, a_min_of_12: c_int, a_max_of_12: c_int) void
    {
        return _ZN10ImDrawList13PathArcToFastERK6ImVec2fii(self, &center, radius, a_min_of_12, a_max_of_12);
    }
    pub fn PathBezierCubicCurveTo(self: * ImDrawList, p2: ImVec2, p3: ImVec2, p4: ImVec2, __default: struct{num_segments: c_int= 0}) void
    {
        return _ZN10ImDrawList22PathBezierCubicCurveToERK6ImVec2S2_S2_i(self, &p2, &p3, &p4, __default.num_segments);
    }
    pub fn PathBezierQuadraticCurveTo(self: * ImDrawList, p2: ImVec2, p3: ImVec2, __default: struct{num_segments: c_int= 0}) void
    {
        return _ZN10ImDrawList26PathBezierQuadraticCurveToERK6ImVec2S2_i(self, &p2, &p3, __default.num_segments);
    }
    pub fn PathRect(self: * ImDrawList, rect_min: ImVec2, rect_max: ImVec2, __default: struct{rounding: f32= 0.0, flags: c_int= 0}) void
    {
        return _ZN10ImDrawList8PathRectERK6ImVec2S2_fi(self, &rect_min, &rect_max, __default.rounding, __default.flags);
    }
    pub fn AddCallback(self: * ImDrawList, callback: *const ImDrawCallback, callback_data: ?*anyopaque) void
    {
        return _ZN10ImDrawList11AddCallbackEPFvPKS_PK9ImDrawCmdEPv(self, callback, callback_data);
    }
    pub fn AddDrawCmd(self: * ImDrawList) void
    {
        return _ZN10ImDrawList10AddDrawCmdEv(self);
    }
    pub fn CloneOutput(self: * ImDrawList) ?*ImDrawList
    {
        return _ZNK10ImDrawList11CloneOutputEv(self);
    }
    pub fn ChannelsSplit(self: * ImDrawList, count: c_int) void
    {
        return _ZN10ImDrawList13ChannelsSplitEi(self, count);
    }
    pub fn ChannelsMerge(self: * ImDrawList) void
    {
        return _ZN10ImDrawList13ChannelsMergeEv(self);
    }
    pub fn ChannelsSetCurrent(self: * ImDrawList, n: c_int) void
    {
        return _ZN10ImDrawList18ChannelsSetCurrentEi(self, n);
    }
    pub fn PrimReserve(self: * ImDrawList, idx_count: c_int, vtx_count: c_int) void
    {
        return _ZN10ImDrawList11PrimReserveEii(self, idx_count, vtx_count);
    }
    pub fn PrimUnreserve(self: * ImDrawList, idx_count: c_int, vtx_count: c_int) void
    {
        return _ZN10ImDrawList13PrimUnreserveEii(self, idx_count, vtx_count);
    }
    pub fn PrimRect(self: * ImDrawList, a: ImVec2, b: ImVec2, col: c_uint) void
    {
        return _ZN10ImDrawList8PrimRectERK6ImVec2S2_j(self, &a, &b, col);
    }
    pub fn PrimRectUV(self: * ImDrawList, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: c_uint) void
    {
        return _ZN10ImDrawList10PrimRectUVERK6ImVec2S2_S2_S2_j(self, &a, &b, &uv_a, &uv_b, col);
    }
    pub fn PrimQuadUV(self: * ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: c_uint) void
    {
        return _ZN10ImDrawList10PrimQuadUVERK6ImVec2S2_S2_S2_S2_S2_S2_S2_j(self, &a, &b, &c, &d, &uv_a, &uv_b, &uv_c, &uv_d, col);
    }
    pub fn PrimWriteVtx(self: * ImDrawList, pos: ImVec2, uv: ImVec2, col: c_uint) void
    {
        return _ZN10ImDrawList12PrimWriteVtxERK6ImVec2S2_j(self, &pos, &uv, col);
    }
    pub fn PrimWriteIdx(self: * ImDrawList, idx: c_ushort) void
    {
        return _ZN10ImDrawList12PrimWriteIdxEt(self, idx);
    }
    pub fn PrimVtx(self: * ImDrawList, pos: ImVec2, uv: ImVec2, col: c_uint) void
    {
        return _ZN10ImDrawList7PrimVtxERK6ImVec2S2_j(self, &pos, &uv, col);
    }
    pub fn AddBezierCurve(self: * ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: c_uint, thickness: f32, __default: struct{num_segments: c_int= 0}) void
    {
        return _ZN10ImDrawList14AddBezierCurveERK6ImVec2S2_S2_S2_jfi(self, &p1, &p2, &p3, &p4, col, thickness, __default.num_segments);
    }
    pub fn PathBezierCurveTo(self: * ImDrawList, p2: ImVec2, p3: ImVec2, p4: ImVec2, __default: struct{num_segments: c_int= 0}) void
    {
        return _ZN10ImDrawList17PathBezierCurveToERK6ImVec2S2_S2_i(self, &p2, &p3, &p4, __default.num_segments);
    }
    pub fn _ResetForNewFrame(self: * ImDrawList) void
    {
        return _ZN10ImDrawList17_ResetForNewFrameEv(self);
    }
    pub fn _ClearFreeMemory(self: * ImDrawList) void
    {
        return _ZN10ImDrawList16_ClearFreeMemoryEv(self);
    }
    pub fn _PopUnusedDrawCmd(self: * ImDrawList) void
    {
        return _ZN10ImDrawList17_PopUnusedDrawCmdEv(self);
    }
    pub fn _TryMergeDrawCmds(self: * ImDrawList) void
    {
        return _ZN10ImDrawList17_TryMergeDrawCmdsEv(self);
    }
    pub fn _OnChangedClipRect(self: * ImDrawList) void
    {
        return _ZN10ImDrawList18_OnChangedClipRectEv(self);
    }
    pub fn _OnChangedTextureID(self: * ImDrawList) void
    {
        return _ZN10ImDrawList19_OnChangedTextureIDEv(self);
    }
    pub fn _OnChangedVtxOffset(self: * ImDrawList) void
    {
        return _ZN10ImDrawList19_OnChangedVtxOffsetEv(self);
    }
    pub fn _CalcCircleAutoSegmentCount(self: * ImDrawList, radius: f32) c_int
    {
        return _ZNK10ImDrawList27_CalcCircleAutoSegmentCountEf(self, radius);
    }
    pub fn _PathArcToFastEx(self: * ImDrawList, center: ImVec2, radius: f32, a_min_sample: c_int, a_max_sample: c_int, a_step: c_int) void
    {
        return _ZN10ImDrawList16_PathArcToFastExERK6ImVec2fiii(self, &center, radius, a_min_sample, a_max_sample, a_step);
    }
    pub fn _PathArcToN(self: * ImDrawList, center: ImVec2, radius: f32, a_min: f32, a_max: f32, num_segments: c_int) void
    {
        return _ZN10ImDrawList11_PathArcToNERK6ImVec2fffi(self, &center, radius, a_min, a_max, num_segments);
    }
};

pub const ImDrawData = extern struct {
    Valid: bool,
    CmdListsCount: c_int,
    TotalIdxCount: c_int,
    TotalVtxCount: c_int,
    CmdLists: ?*?*ImDrawList,
    DisplayPos: ImVec2,
    DisplaySize: ImVec2,
    FramebufferScale: ImVec2,
    OwnerViewport: ?*ImGuiViewport,
};

test "sizeof ImDrawData" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImDrawData) == 56);
}

pub const ImFontConfig = extern struct {
    FontData: ?*anyopaque,
    FontDataSize: c_int,
    FontDataOwnedByAtlas: bool,
    FontNo: c_int,
    SizePixels: f32,
    OversampleH: c_int,
    OversampleV: c_int,
    PixelSnapH: bool,
    GlyphExtraSpacing: ImVec2,
    GlyphOffset: ImVec2,
    GlyphRanges: ?*const ImWchar,
    GlyphMinAdvanceX: f32,
    GlyphMaxAdvanceX: f32,
    MergeMode: bool,
    FontBuilderFlags: c_uint,
    RasterizerMultiply: f32,
    EllipsisChar: ImWchar,
    Name: [40]i8,
    DstFont: ?*ImFont,
};

test "sizeof ImFontConfig" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImFontConfig) == 136);
}

pub const ImFontGlyph = packed struct {
    Colored: u1,
    Visible: u1,
    Codepoint: u30,
    AdvanceX: f32,
    X0: f32,
    Y0: f32,
    X1: f32,
    Y1: f32,
    U0: f32,
    V0: f32,
    U1: f32,
    V1: f32,
};

test "sizeof ImFontGlyph" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImFontGlyph) == 40);
}

pub const ImFontGlyphRangesBuilder = extern struct {
    UsedChars: ImVector,
};

pub const ImFontAtlasCustomRect = extern struct {
    Width: c_ushort,
    Height: c_ushort,
    X: c_ushort,
    Y: c_ushort,
    GlyphID: c_uint,
    GlyphAdvanceX: f32,
    GlyphOffset: ImVec2,
    Font: ?*ImFont,
};

test "sizeof ImFontAtlasCustomRect" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImFontAtlasCustomRect) == 32);
}

extern fn _ZN11ImFontAtlas7AddFontEPK12ImFontConfig(self: * ImFontAtlas, font_cfg: ?*const ImFontConfig) ?*ImFont;
extern fn _ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig(self: * ImFontAtlas, font_cfg: ?*const ImFontConfig) ?*ImFont;
extern fn _ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt(self: * ImFontAtlas, filename: ?[*:0]const u8, size_pixels: f32, font_cfg: ?*const ImFontConfig, glyph_ranges: ?*const ImWchar) ?*ImFont;
extern fn _ZN11ImFontAtlas20AddFontFromMemoryTTFEPvifPK12ImFontConfigPKt(self: * ImFontAtlas, font_data: ?*anyopaque, font_size: c_int, size_pixels: f32, font_cfg: ?*const ImFontConfig, glyph_ranges: ?*const ImWchar) ?*ImFont;
extern fn _ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt(self: * ImFontAtlas, compressed_font_data: ?*const anyopaque, compressed_font_size: c_int, size_pixels: f32, font_cfg: ?*const ImFontConfig, glyph_ranges: ?*const ImWchar) ?*ImFont;
extern fn _ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt(self: * ImFontAtlas, compressed_font_data_base85: ?[*:0]const u8, size_pixels: f32, font_cfg: ?*const ImFontConfig, glyph_ranges: ?*const ImWchar) ?*ImFont;
extern fn _ZN11ImFontAtlas14ClearInputDataEv(self: * ImFontAtlas) void;
extern fn _ZN11ImFontAtlas12ClearTexDataEv(self: * ImFontAtlas) void;
extern fn _ZN11ImFontAtlas10ClearFontsEv(self: * ImFontAtlas) void;
extern fn _ZN11ImFontAtlas5ClearEv(self: * ImFontAtlas) void;
extern fn _ZN11ImFontAtlas5BuildEv(self: * ImFontAtlas) bool;
extern fn _ZN11ImFontAtlas18GetTexDataAsAlpha8EPPhPiS2_S2_(self: * ImFontAtlas, out_pixels: ?*?*u8, out_width: ?*c_int, out_height: ?*c_int, out_bytes_per_pixel: ?*c_int) void;
extern fn _ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_(self: * ImFontAtlas, out_pixels: ?*?*u8, out_width: ?*c_int, out_height: ?*c_int, out_bytes_per_pixel: ?*c_int) void;
extern fn _ZNK11ImFontAtlas7IsBuiltEv(self: * ImFontAtlas) bool;
extern fn _ZN11ImFontAtlas8SetTexIDEPv(self: * ImFontAtlas, _id: ImTextureID) void;
extern fn _ZN11ImFontAtlas21GetGlyphRangesDefaultEv(self: * ImFontAtlas) ?*const ImWchar;
extern fn _ZN11ImFontAtlas20GetGlyphRangesKoreanEv(self: * ImFontAtlas) ?*const ImWchar;
extern fn _ZN11ImFontAtlas22GetGlyphRangesJapaneseEv(self: * ImFontAtlas) ?*const ImWchar;
extern fn _ZN11ImFontAtlas25GetGlyphRangesChineseFullEv(self: * ImFontAtlas) ?*const ImWchar;
extern fn _ZN11ImFontAtlas37GetGlyphRangesChineseSimplifiedCommonEv(self: * ImFontAtlas) ?*const ImWchar;
extern fn _ZN11ImFontAtlas22GetGlyphRangesCyrillicEv(self: * ImFontAtlas) ?*const ImWchar;
extern fn _ZN11ImFontAtlas18GetGlyphRangesThaiEv(self: * ImFontAtlas) ?*const ImWchar;
extern fn _ZN11ImFontAtlas24GetGlyphRangesVietnameseEv(self: * ImFontAtlas) ?*const ImWchar;
extern fn _ZN11ImFontAtlas20AddCustomRectRegularEii(self: * ImFontAtlas, width: c_int, height: c_int) c_int;
extern fn _ZN11ImFontAtlas22AddCustomRectFontGlyphEP6ImFonttiifRK6ImVec2(self: * ImFontAtlas, font: ?*ImFont, _id: ImWchar, width: c_int, height: c_int, advance_x: f32, offset: *const ImVec2) c_int;
extern fn _ZN11ImFontAtlas20GetCustomRectByIndexEi(self: * ImFontAtlas, index: c_int) ?*ImFontAtlasCustomRect;
extern fn _ZNK11ImFontAtlas16CalcCustomRectUVEPK21ImFontAtlasCustomRectP6ImVec2S4_(self: * ImFontAtlas, rect: ?*const ImFontAtlasCustomRect, out_uv_min: ?*ImVec2, out_uv_max: ?*ImVec2) void;
extern fn _ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_(self: * ImFontAtlas, cursor: c_int, out_offset: ?*ImVec2, out_size: ?*ImVec2, out_uv_border: *ImVec2, out_uv_fill: *ImVec2) bool;
pub const ImFontAtlas = extern struct {
    Flags: c_int,
    TexID: ImTextureID,
    TexDesiredWidth: c_int,
    TexGlyphPadding: c_int,
    Locked: bool,
    TexReady: bool,
    TexPixelsUseColors: bool,
    TexPixelsAlpha8: ?*u8,
    TexPixelsRGBA32: ?*c_uint,
    TexWidth: c_int,
    TexHeight: c_int,
    TexUvScale: ImVec2,
    TexUvWhitePixel: ImVec2,
    Fonts: ImVector,
    CustomRects: ImVector,
    ConfigData: ImVector,
    TexUvLines: [64]ImVec4,
    FontBuilderIO: ?*ImFontBuilderIO,
    FontBuilderFlags: c_uint,
    PackIdMouseCursors: c_int,
    PackIdLines: c_int,
    pub fn AddFont(self: * ImFontAtlas, font_cfg: ?*const ImFontConfig) ?*ImFont
    {
        return _ZN11ImFontAtlas7AddFontEPK12ImFontConfig(self, font_cfg);
    }
    pub fn AddFontDefault(self: * ImFontAtlas, __default: struct{font_cfg: ?*const ImFontConfig= null}) ?*ImFont
    {
        return _ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig(self, __default.font_cfg);
    }
    pub fn AddFontFromFileTTF(self: * ImFontAtlas, filename: ?[*:0]const u8, size_pixels: f32, __default: struct{font_cfg: ?*const ImFontConfig= null, glyph_ranges: ?*const ImWchar= null}) ?*ImFont
    {
        return _ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt(self, filename, size_pixels, __default.font_cfg, __default.glyph_ranges);
    }
    pub fn AddFontFromMemoryTTF(self: * ImFontAtlas, font_data: ?*anyopaque, font_size: c_int, size_pixels: f32, __default: struct{font_cfg: ?*const ImFontConfig= null, glyph_ranges: ?*const ImWchar= null}) ?*ImFont
    {
        return _ZN11ImFontAtlas20AddFontFromMemoryTTFEPvifPK12ImFontConfigPKt(self, font_data, font_size, size_pixels, __default.font_cfg, __default.glyph_ranges);
    }
    pub fn AddFontFromMemoryCompressedTTF(self: * ImFontAtlas, compressed_font_data: ?*const anyopaque, compressed_font_size: c_int, size_pixels: f32, __default: struct{font_cfg: ?*const ImFontConfig= null, glyph_ranges: ?*const ImWchar= null}) ?*ImFont
    {
        return _ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt(self, compressed_font_data, compressed_font_size, size_pixels, __default.font_cfg, __default.glyph_ranges);
    }
    pub fn AddFontFromMemoryCompressedBase85TTF(self: * ImFontAtlas, compressed_font_data_base85: ?[*:0]const u8, size_pixels: f32, __default: struct{font_cfg: ?*const ImFontConfig= null, glyph_ranges: ?*const ImWchar= null}) ?*ImFont
    {
        return _ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt(self, compressed_font_data_base85, size_pixels, __default.font_cfg, __default.glyph_ranges);
    }
    pub fn ClearInputData(self: * ImFontAtlas) void
    {
        return _ZN11ImFontAtlas14ClearInputDataEv(self);
    }
    pub fn ClearTexData(self: * ImFontAtlas) void
    {
        return _ZN11ImFontAtlas12ClearTexDataEv(self);
    }
    pub fn ClearFonts(self: * ImFontAtlas) void
    {
        return _ZN11ImFontAtlas10ClearFontsEv(self);
    }
    pub fn Clear(self: * ImFontAtlas) void
    {
        return _ZN11ImFontAtlas5ClearEv(self);
    }
    pub fn Build(self: * ImFontAtlas) bool
    {
        return _ZN11ImFontAtlas5BuildEv(self);
    }
    pub fn GetTexDataAsAlpha8(self: * ImFontAtlas, out_pixels: ?*?*u8, out_width: ?*c_int, out_height: ?*c_int, __default: struct{out_bytes_per_pixel: ?*c_int= null}) void
    {
        return _ZN11ImFontAtlas18GetTexDataAsAlpha8EPPhPiS2_S2_(self, out_pixels, out_width, out_height, __default.out_bytes_per_pixel);
    }
    pub fn GetTexDataAsRGBA32(self: * ImFontAtlas, out_pixels: ?*?*u8, out_width: ?*c_int, out_height: ?*c_int, __default: struct{out_bytes_per_pixel: ?*c_int= null}) void
    {
        return _ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_(self, out_pixels, out_width, out_height, __default.out_bytes_per_pixel);
    }
    pub fn IsBuilt(self: * ImFontAtlas) bool
    {
        return _ZNK11ImFontAtlas7IsBuiltEv(self);
    }
    pub fn SetTexID(self: * ImFontAtlas, _id: ImTextureID) void
    {
        return _ZN11ImFontAtlas8SetTexIDEPv(self, _id);
    }
    pub fn GetGlyphRangesDefault(self: * ImFontAtlas) ?*const ImWchar
    {
        return _ZN11ImFontAtlas21GetGlyphRangesDefaultEv(self);
    }
    pub fn GetGlyphRangesKorean(self: * ImFontAtlas) ?*const ImWchar
    {
        return _ZN11ImFontAtlas20GetGlyphRangesKoreanEv(self);
    }
    pub fn GetGlyphRangesJapanese(self: * ImFontAtlas) ?*const ImWchar
    {
        return _ZN11ImFontAtlas22GetGlyphRangesJapaneseEv(self);
    }
    pub fn GetGlyphRangesChineseFull(self: * ImFontAtlas) ?*const ImWchar
    {
        return _ZN11ImFontAtlas25GetGlyphRangesChineseFullEv(self);
    }
    pub fn GetGlyphRangesChineseSimplifiedCommon(self: * ImFontAtlas) ?*const ImWchar
    {
        return _ZN11ImFontAtlas37GetGlyphRangesChineseSimplifiedCommonEv(self);
    }
    pub fn GetGlyphRangesCyrillic(self: * ImFontAtlas) ?*const ImWchar
    {
        return _ZN11ImFontAtlas22GetGlyphRangesCyrillicEv(self);
    }
    pub fn GetGlyphRangesThai(self: * ImFontAtlas) ?*const ImWchar
    {
        return _ZN11ImFontAtlas18GetGlyphRangesThaiEv(self);
    }
    pub fn GetGlyphRangesVietnamese(self: * ImFontAtlas) ?*const ImWchar
    {
        return _ZN11ImFontAtlas24GetGlyphRangesVietnameseEv(self);
    }
    pub fn AddCustomRectRegular(self: * ImFontAtlas, width: c_int, height: c_int) c_int
    {
        return _ZN11ImFontAtlas20AddCustomRectRegularEii(self, width, height);
    }
    pub fn AddCustomRectFontGlyph(self: * ImFontAtlas, font: ?*ImFont, _id: ImWchar, width: c_int, height: c_int, advance_x: f32, __default: struct{offset: ImVec2= .{.x=0, .y=0}}) c_int
    {
        return _ZN11ImFontAtlas22AddCustomRectFontGlyphEP6ImFonttiifRK6ImVec2(self, font, _id, width, height, advance_x, &__default.offset);
    }
    pub fn GetCustomRectByIndex(self: * ImFontAtlas, index: c_int) ?*ImFontAtlasCustomRect
    {
        return _ZN11ImFontAtlas20GetCustomRectByIndexEi(self, index);
    }
    pub fn CalcCustomRectUV(self: * ImFontAtlas, rect: ?*const ImFontAtlasCustomRect, out_uv_min: ?*ImVec2, out_uv_max: ?*ImVec2) void
    {
        return _ZNK11ImFontAtlas16CalcCustomRectUVEPK21ImFontAtlasCustomRectP6ImVec2S4_(self, rect, out_uv_min, out_uv_max);
    }
    pub fn GetMouseCursorTexData(self: * ImFontAtlas, cursor: c_int, out_offset: ?*ImVec2, out_size: ?*ImVec2, out_uv_border: *ImVec2, out_uv_fill: *ImVec2) bool
    {
        return _ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_(self, cursor, out_offset, out_size, out_uv_border, out_uv_fill);
    }
};

pub const ImFont = extern struct {
    IndexAdvanceX: ImVector,
    FallbackAdvanceX: f32,
    FontSize: f32,
    IndexLookup: ImVector,
    Glyphs: ImVector,
    FallbackGlyph: ?*ImFontGlyph,
    ContainerAtlas: ?*ImFontAtlas,
    ConfigData: ?*ImFontConfig,
    ConfigDataCount: c_short,
    FallbackChar: ImWchar,
    EllipsisChar: ImWchar,
    DotChar: ImWchar,
    DirtyLookupTables: bool,
    Scale: f32,
    Ascent: f32,
    Descent: f32,
    MetricsTotalSurface: c_int,
    Used4kPagesMap: [2]u8,
};

pub const ImGuiViewport = extern struct {
    ID: c_uint,
    Flags: c_int,
    Pos: ImVec2,
    Size: ImVec2,
    WorkPos: ImVec2,
    WorkSize: ImVec2,
    DpiScale: f32,
    ParentViewportId: c_uint,
    DrawData: ?*ImDrawData,
    RendererUserData: ?*anyopaque,
    PlatformUserData: ?*anyopaque,
    PlatformHandle: ?*anyopaque,
    PlatformHandleRaw: ?*anyopaque,
    PlatformRequestMove: bool,
    PlatformRequestResize: bool,
    PlatformRequestClose: bool,
};

test "sizeof ImGuiViewport" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiViewport) == 96);
}

pub const ImGuiPlatformIO = extern struct {
    Platform_CreateWindow: ?*const fn (vp: ?*ImGuiViewport) void,
    Platform_DestroyWindow: ?*const fn (vp: ?*ImGuiViewport) void,
    Platform_ShowWindow: ?*const fn (vp: ?*ImGuiViewport) void,
    Platform_SetWindowPos: ?*const fn (vp: ?*ImGuiViewport, pos: ImVec2) void,
    Platform_GetWindowPos: ?*const fn (vp: ?*ImGuiViewport) ImVec2,
    Platform_SetWindowSize: ?*const fn (vp: ?*ImGuiViewport, size: ImVec2) void,
    Platform_GetWindowSize: ?*const fn (vp: ?*ImGuiViewport) ImVec2,
    Platform_SetWindowFocus: ?*const fn (vp: ?*ImGuiViewport) void,
    Platform_GetWindowFocus: ?*const fn (vp: ?*ImGuiViewport) bool,
    Platform_GetWindowMinimized: ?*const fn (vp: ?*ImGuiViewport) bool,
    Platform_SetWindowTitle: ?*const fn (vp: ?*ImGuiViewport, str: ?[*:0]const u8) void,
    Platform_SetWindowAlpha: ?*const fn (vp: ?*ImGuiViewport, alpha: f32) void,
    Platform_UpdateWindow: ?*const fn (vp: ?*ImGuiViewport) void,
    Platform_RenderWindow: ?*const fn (vp: ?*ImGuiViewport, render_arg: ?*anyopaque) void,
    Platform_SwapBuffers: ?*const fn (vp: ?*ImGuiViewport, render_arg: ?*anyopaque) void,
    Platform_GetWindowDpiScale: ?*const fn (vp: ?*ImGuiViewport) f32,
    Platform_OnChangedViewport: ?*const fn (vp: ?*ImGuiViewport) void,
    Platform_CreateVkSurface: ?*const fn (vp: ?*ImGuiViewport, vk_inst: c_ulonglong, vk_allocators: ?*const anyopaque, out_vk_surface: ?*c_ulonglong) c_int,
    Renderer_CreateWindow: ?*const fn (vp: ?*ImGuiViewport) void,
    Renderer_DestroyWindow: ?*const fn (vp: ?*ImGuiViewport) void,
    Renderer_SetWindowSize: ?*const fn (vp: ?*ImGuiViewport, size: ImVec2) void,
    Renderer_RenderWindow: ?*const fn (vp: ?*ImGuiViewport, render_arg: ?*anyopaque) void,
    Renderer_SwapBuffers: ?*const fn (vp: ?*ImGuiViewport, render_arg: ?*anyopaque) void,
    Monitors: ImVector,
    Viewports: ImVector,
};

pub const ImGuiPlatformMonitor = extern struct {
    MainPos: ImVec2,
    MainSize: ImVec2,
    WorkPos: ImVec2,
    WorkSize: ImVec2,
    DpiScale: f32,
};

test "sizeof ImGuiPlatformMonitor" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiPlatformMonitor) == 36);
}

pub const ImGuiPlatformImeData = extern struct {
    WantVisible: bool,
    InputPos: ImVec2,
    InputLineHeight: f32,
};

test "sizeof ImGuiPlatformImeData" {
    // Optional pointers are the same size as normal pointers, because pointer
    // value 0 is used as the null value.
    try expect(@sizeOf(ImGuiPlatformImeData) == 16);
}

extern "c" fn _ZN5ImGui13CreateContextEP11ImFontAtlas(shared_font_atlas: ?*ImFontAtlas) ?*ImGuiContext;
pub fn CreateContext(__default: struct{shared_font_atlas: ?*ImFontAtlas= null}) ?*ImGuiContext
{
    return _ZN5ImGui13CreateContextEP11ImFontAtlas(__default.shared_font_atlas);
}
extern "c" fn _ZN5ImGui14DestroyContextEP12ImGuiContext(ctx: ?*ImGuiContext) void;
pub fn DestroyContext(__default: struct{ctx: ?*ImGuiContext= null}) void
{
    return _ZN5ImGui14DestroyContextEP12ImGuiContext(__default.ctx);
}
extern "c" fn _ZN5ImGui17GetCurrentContextEv() ?*ImGuiContext;
pub fn GetCurrentContext() ?*ImGuiContext
{
    return _ZN5ImGui17GetCurrentContextEv();
}
extern "c" fn _ZN5ImGui17SetCurrentContextEP12ImGuiContext(ctx: ?*ImGuiContext) void;
pub fn SetCurrentContext(ctx: ?*ImGuiContext) void
{
    return _ZN5ImGui17SetCurrentContextEP12ImGuiContext(ctx);
}
extern "c" fn _ZN5ImGui5GetIOEv() *ImGuiIO;
pub fn GetIO() *ImGuiIO
{
    return _ZN5ImGui5GetIOEv();
}
extern "c" fn _ZN5ImGui8GetStyleEv() *ImGuiStyle;
pub fn GetStyle() *ImGuiStyle
{
    return _ZN5ImGui8GetStyleEv();
}
extern "c" fn _ZN5ImGui8NewFrameEv() void;
pub fn NewFrame() void
{
    return _ZN5ImGui8NewFrameEv();
}
extern "c" fn _ZN5ImGui8EndFrameEv() void;
pub fn EndFrame() void
{
    return _ZN5ImGui8EndFrameEv();
}
extern "c" fn _ZN5ImGui6RenderEv() void;
pub fn Render() void
{
    return _ZN5ImGui6RenderEv();
}
extern "c" fn _ZN5ImGui11GetDrawDataEv() ?*ImDrawData;
pub fn GetDrawData() ?*ImDrawData
{
    return _ZN5ImGui11GetDrawDataEv();
}
extern "c" fn _ZN5ImGui14ShowDemoWindowEPb(p_open: ?*bool) void;
pub fn ShowDemoWindow(__default: struct{p_open: ?*bool= null}) void
{
    return _ZN5ImGui14ShowDemoWindowEPb(__default.p_open);
}
extern "c" fn _ZN5ImGui17ShowMetricsWindowEPb(p_open: ?*bool) void;
pub fn ShowMetricsWindow(__default: struct{p_open: ?*bool= null}) void
{
    return _ZN5ImGui17ShowMetricsWindowEPb(__default.p_open);
}
extern "c" fn _ZN5ImGui18ShowDebugLogWindowEPb(p_open: ?*bool) void;
pub fn ShowDebugLogWindow(__default: struct{p_open: ?*bool= null}) void
{
    return _ZN5ImGui18ShowDebugLogWindowEPb(__default.p_open);
}
extern "c" fn _ZN5ImGui19ShowStackToolWindowEPb(p_open: ?*bool) void;
pub fn ShowStackToolWindow(__default: struct{p_open: ?*bool= null}) void
{
    return _ZN5ImGui19ShowStackToolWindowEPb(__default.p_open);
}
extern "c" fn _ZN5ImGui15ShowAboutWindowEPb(p_open: ?*bool) void;
pub fn ShowAboutWindow(__default: struct{p_open: ?*bool= null}) void
{
    return _ZN5ImGui15ShowAboutWindowEPb(__default.p_open);
}
extern "c" fn _ZN5ImGui15ShowStyleEditorEP10ImGuiStyle(ref: ?*ImGuiStyle) void;
pub fn ShowStyleEditor(__default: struct{ref: ?*ImGuiStyle= null}) void
{
    return _ZN5ImGui15ShowStyleEditorEP10ImGuiStyle(__default.ref);
}
extern "c" fn _ZN5ImGui17ShowStyleSelectorEPKc(label: ?[*:0]const u8) bool;
pub fn ShowStyleSelector(label: ?[*:0]const u8) bool
{
    return _ZN5ImGui17ShowStyleSelectorEPKc(label);
}
extern "c" fn _ZN5ImGui16ShowFontSelectorEPKc(label: ?[*:0]const u8) void;
pub fn ShowFontSelector(label: ?[*:0]const u8) void
{
    return _ZN5ImGui16ShowFontSelectorEPKc(label);
}
extern "c" fn _ZN5ImGui13ShowUserGuideEv() void;
pub fn ShowUserGuide() void
{
    return _ZN5ImGui13ShowUserGuideEv();
}
extern "c" fn _ZN5ImGui10GetVersionEv() ?[*:0]const u8;
pub fn GetVersion() ?[*:0]const u8
{
    return _ZN5ImGui10GetVersionEv();
}
extern "c" fn _ZN5ImGui15StyleColorsDarkEP10ImGuiStyle(dst: ?*ImGuiStyle) void;
pub fn StyleColorsDark(__default: struct{dst: ?*ImGuiStyle= null}) void
{
    return _ZN5ImGui15StyleColorsDarkEP10ImGuiStyle(__default.dst);
}
extern "c" fn _ZN5ImGui16StyleColorsLightEP10ImGuiStyle(dst: ?*ImGuiStyle) void;
pub fn StyleColorsLight(__default: struct{dst: ?*ImGuiStyle= null}) void
{
    return _ZN5ImGui16StyleColorsLightEP10ImGuiStyle(__default.dst);
}
extern "c" fn _ZN5ImGui18StyleColorsClassicEP10ImGuiStyle(dst: ?*ImGuiStyle) void;
pub fn StyleColorsClassic(__default: struct{dst: ?*ImGuiStyle= null}) void
{
    return _ZN5ImGui18StyleColorsClassicEP10ImGuiStyle(__default.dst);
}
extern "c" fn _ZN5ImGui5BeginEPKcPbi(name: ?[*:0]const u8, p_open: ?*bool, flags: c_int) bool;
pub fn Begin(name: ?[*:0]const u8, __default: struct{p_open: ?*bool= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui5BeginEPKcPbi(name, __default.p_open, __default.flags);
}
extern "c" fn _ZN5ImGui3EndEv() void;
pub fn End() void
{
    return _ZN5ImGui3EndEv();
}
extern "c" fn _ZN5ImGui10BeginChildEPKcRK6ImVec2bi(str_id: ?[*:0]const u8, size: *const ImVec2, border: bool, flags: c_int) bool;
pub fn BeginChild(str_id: ?[*:0]const u8, __default: struct{size: ImVec2= .{.x=0, .y=0}, border: bool= false, flags: c_int= 0}) bool
{
    return _ZN5ImGui10BeginChildEPKcRK6ImVec2bi(str_id, &__default.size, __default.border, __default.flags);
}
extern "c" fn _ZN5ImGui10BeginChildEjRK6ImVec2bi(_id: c_uint, size: *const ImVec2, border: bool, flags: c_int) bool;
pub fn BeginChild_2(_id: c_uint, __default: struct{size: ImVec2= .{.x=0, .y=0}, border: bool= false, flags: c_int= 0}) bool
{
    return _ZN5ImGui10BeginChildEjRK6ImVec2bi(_id, &__default.size, __default.border, __default.flags);
}
extern "c" fn _ZN5ImGui8EndChildEv() void;
pub fn EndChild() void
{
    return _ZN5ImGui8EndChildEv();
}
extern "c" fn _ZN5ImGui17IsWindowAppearingEv() bool;
pub fn IsWindowAppearing() bool
{
    return _ZN5ImGui17IsWindowAppearingEv();
}
extern "c" fn _ZN5ImGui17IsWindowCollapsedEv() bool;
pub fn IsWindowCollapsed() bool
{
    return _ZN5ImGui17IsWindowCollapsedEv();
}
extern "c" fn _ZN5ImGui15IsWindowFocusedEi(flags: c_int) bool;
pub fn IsWindowFocused(__default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui15IsWindowFocusedEi(__default.flags);
}
extern "c" fn _ZN5ImGui15IsWindowHoveredEi(flags: c_int) bool;
pub fn IsWindowHovered(__default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui15IsWindowHoveredEi(__default.flags);
}
extern "c" fn _ZN5ImGui17GetWindowDrawListEv() ?*ImDrawList;
pub fn GetWindowDrawList() ?*ImDrawList
{
    return _ZN5ImGui17GetWindowDrawListEv();
}
extern "c" fn _ZN5ImGui17GetWindowDpiScaleEv() f32;
pub fn GetWindowDpiScale() f32
{
    return _ZN5ImGui17GetWindowDpiScaleEv();
}
extern "c" fn imgui_GetWindowPos(v: *ImVec2) void;
pub fn GetWindowPos() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetWindowPos(&v);
    return v;
}

extern "c" fn imgui_GetWindowSize(v: *ImVec2) void;
pub fn GetWindowSize() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetWindowSize(&v);
    return v;
}

extern "c" fn _ZN5ImGui14GetWindowWidthEv() f32;
pub fn GetWindowWidth() f32
{
    return _ZN5ImGui14GetWindowWidthEv();
}
extern "c" fn _ZN5ImGui15GetWindowHeightEv() f32;
pub fn GetWindowHeight() f32
{
    return _ZN5ImGui15GetWindowHeightEv();
}
extern "c" fn _ZN5ImGui17GetWindowViewportEv() ?*ImGuiViewport;
pub fn GetWindowViewport() ?*ImGuiViewport
{
    return _ZN5ImGui17GetWindowViewportEv();
}
extern "c" fn _ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_(pos: *const ImVec2, cond: c_int, pivot: *const ImVec2) void;
pub fn SetNextWindowPos(pos: ImVec2, __default: struct{cond: c_int= 0, pivot: ImVec2= .{.x=0, .y=0}}) void
{
    return _ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_(&pos, __default.cond, &__default.pivot);
}
extern "c" fn _ZN5ImGui17SetNextWindowSizeERK6ImVec2i(size: *const ImVec2, cond: c_int) void;
pub fn SetNextWindowSize(size: ImVec2, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui17SetNextWindowSizeERK6ImVec2i(&size, __default.cond);
}
extern "c" fn _ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv(size_min: *const ImVec2, size_max: *const ImVec2, custom_callback: *const ImGuiSizeCallback, custom_callback_data: ?*anyopaque) void;
pub fn SetNextWindowSizeConstraints(size_min: ImVec2, size_max: ImVec2, __default: struct{custom_callback: *const ImGuiSizeCallback= null, custom_callback_data: ?*anyopaque= null}) void
{
    return _ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv(&size_min, &size_max, __default.custom_callback, __default.custom_callback_data);
}
extern "c" fn _ZN5ImGui24SetNextWindowContentSizeERK6ImVec2(size: *const ImVec2) void;
pub fn SetNextWindowContentSize(size: ImVec2) void
{
    return _ZN5ImGui24SetNextWindowContentSizeERK6ImVec2(&size);
}
extern "c" fn _ZN5ImGui22SetNextWindowCollapsedEbi(collapsed: bool, cond: c_int) void;
pub fn SetNextWindowCollapsed(collapsed: bool, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui22SetNextWindowCollapsedEbi(collapsed, __default.cond);
}
extern "c" fn _ZN5ImGui18SetNextWindowFocusEv() void;
pub fn SetNextWindowFocus() void
{
    return _ZN5ImGui18SetNextWindowFocusEv();
}
extern "c" fn _ZN5ImGui20SetNextWindowBgAlphaEf(alpha: f32) void;
pub fn SetNextWindowBgAlpha(alpha: f32) void
{
    return _ZN5ImGui20SetNextWindowBgAlphaEf(alpha);
}
extern "c" fn _ZN5ImGui21SetNextWindowViewportEj(viewport_id: c_uint) void;
pub fn SetNextWindowViewport(viewport_id: c_uint) void
{
    return _ZN5ImGui21SetNextWindowViewportEj(viewport_id);
}
extern "c" fn _ZN5ImGui12SetWindowPosERK6ImVec2i(pos: *const ImVec2, cond: c_int) void;
pub fn SetWindowPos(pos: ImVec2, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui12SetWindowPosERK6ImVec2i(&pos, __default.cond);
}
extern "c" fn _ZN5ImGui13SetWindowSizeERK6ImVec2i(size: *const ImVec2, cond: c_int) void;
pub fn SetWindowSize(size: ImVec2, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui13SetWindowSizeERK6ImVec2i(&size, __default.cond);
}
extern "c" fn _ZN5ImGui18SetWindowCollapsedEbi(collapsed: bool, cond: c_int) void;
pub fn SetWindowCollapsed(collapsed: bool, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui18SetWindowCollapsedEbi(collapsed, __default.cond);
}
extern "c" fn _ZN5ImGui14SetWindowFocusEv() void;
pub fn SetWindowFocus() void
{
    return _ZN5ImGui14SetWindowFocusEv();
}
extern "c" fn _ZN5ImGui18SetWindowFontScaleEf(scale: f32) void;
pub fn SetWindowFontScale(scale: f32) void
{
    return _ZN5ImGui18SetWindowFontScaleEf(scale);
}
extern "c" fn _ZN5ImGui12SetWindowPosEPKcRK6ImVec2i(name: ?[*:0]const u8, pos: *const ImVec2, cond: c_int) void;
pub fn SetWindowPos_2(name: ?[*:0]const u8, pos: ImVec2, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui12SetWindowPosEPKcRK6ImVec2i(name, &pos, __default.cond);
}
extern "c" fn _ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i(name: ?[*:0]const u8, size: *const ImVec2, cond: c_int) void;
pub fn SetWindowSize_2(name: ?[*:0]const u8, size: ImVec2, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i(name, &size, __default.cond);
}
extern "c" fn _ZN5ImGui18SetWindowCollapsedEPKcbi(name: ?[*:0]const u8, collapsed: bool, cond: c_int) void;
pub fn SetWindowCollapsed_2(name: ?[*:0]const u8, collapsed: bool, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui18SetWindowCollapsedEPKcbi(name, collapsed, __default.cond);
}
extern "c" fn _ZN5ImGui14SetWindowFocusEPKc(name: ?[*:0]const u8) void;
pub fn SetWindowFocus_2(name: ?[*:0]const u8) void
{
    return _ZN5ImGui14SetWindowFocusEPKc(name);
}
extern "c" fn imgui_GetContentRegionAvail(v: *ImVec2) void;
pub fn GetContentRegionAvail() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetContentRegionAvail(&v);
    return v;
}

extern "c" fn imgui_GetContentRegionMax(v: *ImVec2) void;
pub fn GetContentRegionMax() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetContentRegionMax(&v);
    return v;
}

extern "c" fn imgui_GetWindowContentRegionMin(v: *ImVec2) void;
pub fn GetWindowContentRegionMin() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetWindowContentRegionMin(&v);
    return v;
}

extern "c" fn imgui_GetWindowContentRegionMax(v: *ImVec2) void;
pub fn GetWindowContentRegionMax() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetWindowContentRegionMax(&v);
    return v;
}

extern "c" fn _ZN5ImGui10GetScrollXEv() f32;
pub fn GetScrollX() f32
{
    return _ZN5ImGui10GetScrollXEv();
}
extern "c" fn _ZN5ImGui10GetScrollYEv() f32;
pub fn GetScrollY() f32
{
    return _ZN5ImGui10GetScrollYEv();
}
extern "c" fn _ZN5ImGui10SetScrollXEf(scroll_x: f32) void;
pub fn SetScrollX(scroll_x: f32) void
{
    return _ZN5ImGui10SetScrollXEf(scroll_x);
}
extern "c" fn _ZN5ImGui10SetScrollYEf(scroll_y: f32) void;
pub fn SetScrollY(scroll_y: f32) void
{
    return _ZN5ImGui10SetScrollYEf(scroll_y);
}
extern "c" fn _ZN5ImGui13GetScrollMaxXEv() f32;
pub fn GetScrollMaxX() f32
{
    return _ZN5ImGui13GetScrollMaxXEv();
}
extern "c" fn _ZN5ImGui13GetScrollMaxYEv() f32;
pub fn GetScrollMaxY() f32
{
    return _ZN5ImGui13GetScrollMaxYEv();
}
extern "c" fn _ZN5ImGui14SetScrollHereXEf(center_x_ratio: f32) void;
pub fn SetScrollHereX(__default: struct{center_x_ratio: f32= 0.5}) void
{
    return _ZN5ImGui14SetScrollHereXEf(__default.center_x_ratio);
}
extern "c" fn _ZN5ImGui14SetScrollHereYEf(center_y_ratio: f32) void;
pub fn SetScrollHereY(__default: struct{center_y_ratio: f32= 0.5}) void
{
    return _ZN5ImGui14SetScrollHereYEf(__default.center_y_ratio);
}
extern "c" fn _ZN5ImGui17SetScrollFromPosXEff(local_x: f32, center_x_ratio: f32) void;
pub fn SetScrollFromPosX(local_x: f32, __default: struct{center_x_ratio: f32= 0.5}) void
{
    return _ZN5ImGui17SetScrollFromPosXEff(local_x, __default.center_x_ratio);
}
extern "c" fn _ZN5ImGui17SetScrollFromPosYEff(local_y: f32, center_y_ratio: f32) void;
pub fn SetScrollFromPosY(local_y: f32, __default: struct{center_y_ratio: f32= 0.5}) void
{
    return _ZN5ImGui17SetScrollFromPosYEff(local_y, __default.center_y_ratio);
}
extern "c" fn _ZN5ImGui8PushFontEP6ImFont(font: ?*ImFont) void;
pub fn PushFont(font: ?*ImFont) void
{
    return _ZN5ImGui8PushFontEP6ImFont(font);
}
extern "c" fn _ZN5ImGui7PopFontEv() void;
pub fn PopFont() void
{
    return _ZN5ImGui7PopFontEv();
}
extern "c" fn _ZN5ImGui14PushStyleColorEij(idx: c_int, col: c_uint) void;
pub fn PushStyleColor(idx: c_int, col: c_uint) void
{
    return _ZN5ImGui14PushStyleColorEij(idx, col);
}
extern "c" fn _ZN5ImGui14PushStyleColorEiRK6ImVec4(idx: c_int, col: *const ImVec4) void;
pub fn PushStyleColor_2(idx: c_int, col: ImVec4) void
{
    return _ZN5ImGui14PushStyleColorEiRK6ImVec4(idx, &col);
}
extern "c" fn _ZN5ImGui13PopStyleColorEi(count: c_int) void;
pub fn PopStyleColor(__default: struct{count: c_int= 1}) void
{
    return _ZN5ImGui13PopStyleColorEi(__default.count);
}
extern "c" fn _ZN5ImGui12PushStyleVarEif(idx: c_int, val: f32) void;
pub fn PushStyleVar(idx: c_int, val: f32) void
{
    return _ZN5ImGui12PushStyleVarEif(idx, val);
}
extern "c" fn _ZN5ImGui12PushStyleVarEiRK6ImVec2(idx: c_int, val: *const ImVec2) void;
pub fn PushStyleVar_2(idx: c_int, val: ImVec2) void
{
    return _ZN5ImGui12PushStyleVarEiRK6ImVec2(idx, &val);
}
extern "c" fn _ZN5ImGui11PopStyleVarEi(count: c_int) void;
pub fn PopStyleVar(__default: struct{count: c_int= 1}) void
{
    return _ZN5ImGui11PopStyleVarEi(__default.count);
}
extern "c" fn _ZN5ImGui22PushAllowKeyboardFocusEb(allow_keyboard_focus: bool) void;
pub fn PushAllowKeyboardFocus(allow_keyboard_focus: bool) void
{
    return _ZN5ImGui22PushAllowKeyboardFocusEb(allow_keyboard_focus);
}
extern "c" fn _ZN5ImGui21PopAllowKeyboardFocusEv() void;
pub fn PopAllowKeyboardFocus() void
{
    return _ZN5ImGui21PopAllowKeyboardFocusEv();
}
extern "c" fn _ZN5ImGui16PushButtonRepeatEb(repeat: bool) void;
pub fn PushButtonRepeat(repeat: bool) void
{
    return _ZN5ImGui16PushButtonRepeatEb(repeat);
}
extern "c" fn _ZN5ImGui15PopButtonRepeatEv() void;
pub fn PopButtonRepeat() void
{
    return _ZN5ImGui15PopButtonRepeatEv();
}
extern "c" fn _ZN5ImGui13PushItemWidthEf(item_width: f32) void;
pub fn PushItemWidth(item_width: f32) void
{
    return _ZN5ImGui13PushItemWidthEf(item_width);
}
extern "c" fn _ZN5ImGui12PopItemWidthEv() void;
pub fn PopItemWidth() void
{
    return _ZN5ImGui12PopItemWidthEv();
}
extern "c" fn _ZN5ImGui16SetNextItemWidthEf(item_width: f32) void;
pub fn SetNextItemWidth(item_width: f32) void
{
    return _ZN5ImGui16SetNextItemWidthEf(item_width);
}
extern "c" fn _ZN5ImGui13CalcItemWidthEv() f32;
pub fn CalcItemWidth() f32
{
    return _ZN5ImGui13CalcItemWidthEv();
}
extern "c" fn _ZN5ImGui15PushTextWrapPosEf(wrap_local_pos_x: f32) void;
pub fn PushTextWrapPos(__default: struct{wrap_local_pos_x: f32= 0.0}) void
{
    return _ZN5ImGui15PushTextWrapPosEf(__default.wrap_local_pos_x);
}
extern "c" fn _ZN5ImGui14PopTextWrapPosEv() void;
pub fn PopTextWrapPos() void
{
    return _ZN5ImGui14PopTextWrapPosEv();
}
extern "c" fn _ZN5ImGui7GetFontEv() ?*ImFont;
pub fn GetFont() ?*ImFont
{
    return _ZN5ImGui7GetFontEv();
}
extern "c" fn _ZN5ImGui11GetFontSizeEv() f32;
pub fn GetFontSize() f32
{
    return _ZN5ImGui11GetFontSizeEv();
}
extern "c" fn imgui_GetFontTexUvWhitePixel(v: *ImVec2) void;
pub fn GetFontTexUvWhitePixel() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetFontTexUvWhitePixel(&v);
    return v;
}

extern "c" fn _ZN5ImGui11GetColorU32Eif(idx: c_int, alpha_mul: f32) c_uint;
pub fn GetColorU32(idx: c_int, __default: struct{alpha_mul: f32= 1.0}) c_uint
{
    return _ZN5ImGui11GetColorU32Eif(idx, __default.alpha_mul);
}
extern "c" fn _ZN5ImGui11GetColorU32ERK6ImVec4(col: *const ImVec4) c_uint;
pub fn GetColorU32_2(col: ImVec4) c_uint
{
    return _ZN5ImGui11GetColorU32ERK6ImVec4(&col);
}
extern "c" fn _ZN5ImGui11GetColorU32Ej(col: c_uint) c_uint;
pub fn GetColorU32_3(col: c_uint) c_uint
{
    return _ZN5ImGui11GetColorU32Ej(col);
}
extern "c" fn _ZN5ImGui17GetStyleColorVec4Ei(idx: c_int) *ImVec4;
pub fn GetStyleColorVec4(idx: c_int) *ImVec4
{
    return _ZN5ImGui17GetStyleColorVec4Ei(idx);
}
extern "c" fn _ZN5ImGui9SeparatorEv() void;
pub fn Separator() void
{
    return _ZN5ImGui9SeparatorEv();
}
extern "c" fn _ZN5ImGui8SameLineEff(offset_from_start_x: f32, spacing: f32) void;
pub fn SameLine(__default: struct{offset_from_start_x: f32= 0.0, spacing: f32= -1.0}) void
{
    return _ZN5ImGui8SameLineEff(__default.offset_from_start_x, __default.spacing);
}
extern "c" fn _ZN5ImGui7NewLineEv() void;
pub fn NewLine() void
{
    return _ZN5ImGui7NewLineEv();
}
extern "c" fn _ZN5ImGui7SpacingEv() void;
pub fn Spacing() void
{
    return _ZN5ImGui7SpacingEv();
}
extern "c" fn _ZN5ImGui5DummyERK6ImVec2(size: *const ImVec2) void;
pub fn Dummy(size: ImVec2) void
{
    return _ZN5ImGui5DummyERK6ImVec2(&size);
}
extern "c" fn _ZN5ImGui6IndentEf(indent_w: f32) void;
pub fn Indent(__default: struct{indent_w: f32= 0.0}) void
{
    return _ZN5ImGui6IndentEf(__default.indent_w);
}
extern "c" fn _ZN5ImGui8UnindentEf(indent_w: f32) void;
pub fn Unindent(__default: struct{indent_w: f32= 0.0}) void
{
    return _ZN5ImGui8UnindentEf(__default.indent_w);
}
extern "c" fn _ZN5ImGui10BeginGroupEv() void;
pub fn BeginGroup() void
{
    return _ZN5ImGui10BeginGroupEv();
}
extern "c" fn _ZN5ImGui8EndGroupEv() void;
pub fn EndGroup() void
{
    return _ZN5ImGui8EndGroupEv();
}
extern "c" fn imgui_GetCursorPos(v: *ImVec2) void;
pub fn GetCursorPos() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetCursorPos(&v);
    return v;
}

extern "c" fn _ZN5ImGui13GetCursorPosXEv() f32;
pub fn GetCursorPosX() f32
{
    return _ZN5ImGui13GetCursorPosXEv();
}
extern "c" fn _ZN5ImGui13GetCursorPosYEv() f32;
pub fn GetCursorPosY() f32
{
    return _ZN5ImGui13GetCursorPosYEv();
}
extern "c" fn _ZN5ImGui12SetCursorPosERK6ImVec2(local_pos: *const ImVec2) void;
pub fn SetCursorPos(local_pos: ImVec2) void
{
    return _ZN5ImGui12SetCursorPosERK6ImVec2(&local_pos);
}
extern "c" fn _ZN5ImGui13SetCursorPosXEf(local_x: f32) void;
pub fn SetCursorPosX(local_x: f32) void
{
    return _ZN5ImGui13SetCursorPosXEf(local_x);
}
extern "c" fn _ZN5ImGui13SetCursorPosYEf(local_y: f32) void;
pub fn SetCursorPosY(local_y: f32) void
{
    return _ZN5ImGui13SetCursorPosYEf(local_y);
}
extern "c" fn imgui_GetCursorStartPos(v: *ImVec2) void;
pub fn GetCursorStartPos() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetCursorStartPos(&v);
    return v;
}

extern "c" fn imgui_GetCursorScreenPos(v: *ImVec2) void;
pub fn GetCursorScreenPos() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetCursorScreenPos(&v);
    return v;
}

extern "c" fn _ZN5ImGui18SetCursorScreenPosERK6ImVec2(pos: *const ImVec2) void;
pub fn SetCursorScreenPos(pos: ImVec2) void
{
    return _ZN5ImGui18SetCursorScreenPosERK6ImVec2(&pos);
}
extern "c" fn _ZN5ImGui23AlignTextToFramePaddingEv() void;
pub fn AlignTextToFramePadding() void
{
    return _ZN5ImGui23AlignTextToFramePaddingEv();
}
extern "c" fn _ZN5ImGui17GetTextLineHeightEv() f32;
pub fn GetTextLineHeight() f32
{
    return _ZN5ImGui17GetTextLineHeightEv();
}
extern "c" fn _ZN5ImGui28GetTextLineHeightWithSpacingEv() f32;
pub fn GetTextLineHeightWithSpacing() f32
{
    return _ZN5ImGui28GetTextLineHeightWithSpacingEv();
}
extern "c" fn _ZN5ImGui14GetFrameHeightEv() f32;
pub fn GetFrameHeight() f32
{
    return _ZN5ImGui14GetFrameHeightEv();
}
extern "c" fn _ZN5ImGui25GetFrameHeightWithSpacingEv() f32;
pub fn GetFrameHeightWithSpacing() f32
{
    return _ZN5ImGui25GetFrameHeightWithSpacingEv();
}
extern "c" fn _ZN5ImGui6PushIDEPKc(str_id: ?[*:0]const u8) void;
pub fn PushID(str_id: ?[*:0]const u8) void
{
    return _ZN5ImGui6PushIDEPKc(str_id);
}
extern "c" fn _ZN5ImGui6PushIDEPKcS1_(str_id_begin: ?[*:0]const u8, str_id_end: ?[*:0]const u8) void;
pub fn PushID_2(str_id_begin: ?[*:0]const u8, str_id_end: ?[*:0]const u8) void
{
    return _ZN5ImGui6PushIDEPKcS1_(str_id_begin, str_id_end);
}
extern "c" fn _ZN5ImGui6PushIDEPKv(ptr_id: ?*const anyopaque) void;
pub fn PushID_3(ptr_id: ?*const anyopaque) void
{
    return _ZN5ImGui6PushIDEPKv(ptr_id);
}
extern "c" fn _ZN5ImGui6PushIDEi(int_id: c_int) void;
pub fn PushID_4(int_id: c_int) void
{
    return _ZN5ImGui6PushIDEi(int_id);
}
extern "c" fn _ZN5ImGui5PopIDEv() void;
pub fn PopID() void
{
    return _ZN5ImGui5PopIDEv();
}
extern "c" fn _ZN5ImGui5GetIDEPKc(str_id: ?[*:0]const u8) c_uint;
pub fn GetID(str_id: ?[*:0]const u8) c_uint
{
    return _ZN5ImGui5GetIDEPKc(str_id);
}
extern "c" fn _ZN5ImGui5GetIDEPKcS1_(str_id_begin: ?[*:0]const u8, str_id_end: ?[*:0]const u8) c_uint;
pub fn GetID_2(str_id_begin: ?[*:0]const u8, str_id_end: ?[*:0]const u8) c_uint
{
    return _ZN5ImGui5GetIDEPKcS1_(str_id_begin, str_id_end);
}
extern "c" fn _ZN5ImGui5GetIDEPKv(ptr_id: ?*const anyopaque) c_uint;
pub fn GetID_3(ptr_id: ?*const anyopaque) c_uint
{
    return _ZN5ImGui5GetIDEPKv(ptr_id);
}
extern "c" fn _ZN5ImGui15TextUnformattedEPKcS1_(text: ?[*:0]const u8, text_end: ?[*:0]const u8) void;
pub fn TextUnformatted(text: ?[*:0]const u8, __default: struct{text_end: ?[*:0]const u8= null}) void
{
    return _ZN5ImGui15TextUnformattedEPKcS1_(text, __default.text_end);
}
extern "c" fn _ZN5ImGui4TextEPKcz(fmt: ?[*:0]const u8, ...) void;
pub fn Text(fmt: ?[*:0]const u8, __va__: anytype) void
{
    return @call(.{}, _ZN5ImGui4TextEPKcz, .{fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui5TextVEPKci(fmt: ?[*:0]const u8, args: c_int) void;
pub fn TextV(fmt: ?[*:0]const u8, args: c_int) void
{
    return _ZN5ImGui5TextVEPKci(fmt, args);
}
extern "c" fn _ZN5ImGui11TextColoredERK6ImVec4PKcz(col: *const ImVec4, fmt: ?[*:0]const u8, ...) void;
pub fn TextColored(col: ImVec4, fmt: ?[*:0]const u8, __va__: anytype) void
{
    return @call(.{}, _ZN5ImGui11TextColoredERK6ImVec4PKcz, .{&col, fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui12TextColoredVERK6ImVec4PKci(col: *const ImVec4, fmt: ?[*:0]const u8, args: c_int) void;
pub fn TextColoredV(col: ImVec4, fmt: ?[*:0]const u8, args: c_int) void
{
    return _ZN5ImGui12TextColoredVERK6ImVec4PKci(&col, fmt, args);
}
extern "c" fn _ZN5ImGui12TextDisabledEPKcz(fmt: ?[*:0]const u8, ...) void;
pub fn TextDisabled(fmt: ?[*:0]const u8, __va__: anytype) void
{
    return @call(.{}, _ZN5ImGui12TextDisabledEPKcz, .{fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui13TextDisabledVEPKci(fmt: ?[*:0]const u8, args: c_int) void;
pub fn TextDisabledV(fmt: ?[*:0]const u8, args: c_int) void
{
    return _ZN5ImGui13TextDisabledVEPKci(fmt, args);
}
extern "c" fn _ZN5ImGui11TextWrappedEPKcz(fmt: ?[*:0]const u8, ...) void;
pub fn TextWrapped(fmt: ?[*:0]const u8, __va__: anytype) void
{
    return @call(.{}, _ZN5ImGui11TextWrappedEPKcz, .{fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui12TextWrappedVEPKci(fmt: ?[*:0]const u8, args: c_int) void;
pub fn TextWrappedV(fmt: ?[*:0]const u8, args: c_int) void
{
    return _ZN5ImGui12TextWrappedVEPKci(fmt, args);
}
extern "c" fn _ZN5ImGui9LabelTextEPKcS1_z(label: ?[*:0]const u8, fmt: ?[*:0]const u8, ...) void;
pub fn LabelText(label: ?[*:0]const u8, fmt: ?[*:0]const u8, __va__: anytype) void
{
    return @call(.{}, _ZN5ImGui9LabelTextEPKcS1_z, .{label, fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui10LabelTextVEPKcS1_i(label: ?[*:0]const u8, fmt: ?[*:0]const u8, args: c_int) void;
pub fn LabelTextV(label: ?[*:0]const u8, fmt: ?[*:0]const u8, args: c_int) void
{
    return _ZN5ImGui10LabelTextVEPKcS1_i(label, fmt, args);
}
extern "c" fn _ZN5ImGui10BulletTextEPKcz(fmt: ?[*:0]const u8, ...) void;
pub fn BulletText(fmt: ?[*:0]const u8, __va__: anytype) void
{
    return @call(.{}, _ZN5ImGui10BulletTextEPKcz, .{fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui11BulletTextVEPKci(fmt: ?[*:0]const u8, args: c_int) void;
pub fn BulletTextV(fmt: ?[*:0]const u8, args: c_int) void
{
    return _ZN5ImGui11BulletTextVEPKci(fmt, args);
}
extern "c" fn _ZN5ImGui6ButtonEPKcRK6ImVec2(label: ?[*:0]const u8, size: *const ImVec2) bool;
pub fn Button(label: ?[*:0]const u8, __default: struct{size: ImVec2= .{.x=0, .y=0}}) bool
{
    return _ZN5ImGui6ButtonEPKcRK6ImVec2(label, &__default.size);
}
extern "c" fn _ZN5ImGui11SmallButtonEPKc(label: ?[*:0]const u8) bool;
pub fn SmallButton(label: ?[*:0]const u8) bool
{
    return _ZN5ImGui11SmallButtonEPKc(label);
}
extern "c" fn _ZN5ImGui15InvisibleButtonEPKcRK6ImVec2i(str_id: ?[*:0]const u8, size: *const ImVec2, flags: c_int) bool;
pub fn InvisibleButton(str_id: ?[*:0]const u8, size: ImVec2, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui15InvisibleButtonEPKcRK6ImVec2i(str_id, &size, __default.flags);
}
extern "c" fn _ZN5ImGui11ArrowButtonEPKci(str_id: ?[*:0]const u8, dir: c_int) bool;
pub fn ArrowButton(str_id: ?[*:0]const u8, dir: c_int) bool
{
    return _ZN5ImGui11ArrowButtonEPKci(str_id, dir);
}
extern "c" fn _ZN5ImGui8CheckboxEPKcPb(label: ?[*:0]const u8, v: ?*bool) bool;
pub fn Checkbox(label: ?[*:0]const u8, v: ?*bool) bool
{
    return _ZN5ImGui8CheckboxEPKcPb(label, v);
}
extern "c" fn _ZN5ImGui13CheckboxFlagsEPKcPii(label: ?[*:0]const u8, flags: ?*c_int, flags_value: c_int) bool;
pub fn CheckboxFlags(label: ?[*:0]const u8, flags: ?*c_int, flags_value: c_int) bool
{
    return _ZN5ImGui13CheckboxFlagsEPKcPii(label, flags, flags_value);
}
extern "c" fn _ZN5ImGui13CheckboxFlagsEPKcPjj(label: ?[*:0]const u8, flags: ?*c_uint, flags_value: c_uint) bool;
pub fn CheckboxFlags_2(label: ?[*:0]const u8, flags: ?*c_uint, flags_value: c_uint) bool
{
    return _ZN5ImGui13CheckboxFlagsEPKcPjj(label, flags, flags_value);
}
extern "c" fn _ZN5ImGui11RadioButtonEPKcb(label: ?[*:0]const u8, active: bool) bool;
pub fn RadioButton(label: ?[*:0]const u8, active: bool) bool
{
    return _ZN5ImGui11RadioButtonEPKcb(label, active);
}
extern "c" fn _ZN5ImGui11RadioButtonEPKcPii(label: ?[*:0]const u8, v: ?*c_int, v_button: c_int) bool;
pub fn RadioButton_2(label: ?[*:0]const u8, v: ?*c_int, v_button: c_int) bool
{
    return _ZN5ImGui11RadioButtonEPKcPii(label, v, v_button);
}
extern "c" fn _ZN5ImGui11ProgressBarEfRK6ImVec2PKc(fraction: f32, size_arg: *const ImVec2, overlay: ?[*:0]const u8) void;
pub fn ProgressBar(fraction: f32, __default: struct{size_arg: ImVec2= ImVec2(-1.175494351e-38,0), overlay: ?[*:0]const u8= null}) void
{
    return _ZN5ImGui11ProgressBarEfRK6ImVec2PKc(fraction, &__default.size_arg, __default.overlay);
}
extern "c" fn _ZN5ImGui6BulletEv() void;
pub fn Bullet() void
{
    return _ZN5ImGui6BulletEv();
}
extern "c" fn _ZN5ImGui5ImageEPvRK6ImVec2S3_S3_RK6ImVec4S6_(user_texture_id: ImTextureID, size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, tint_col: *const ImVec4, border_col: *const ImVec4) void;
pub fn Image(user_texture_id: ImTextureID, size: ImVec2, __default: struct{uv0: ImVec2= .{.x=0, .y=0}, uv1: ImVec2= ImVec2(1,1), tint_col: ImVec4= ImVec4(1,1,1,1), border_col: ImVec4= ImVec4(0,0,0,0)}) void
{
    return _ZN5ImGui5ImageEPvRK6ImVec2S3_S3_RK6ImVec4S6_(user_texture_id, &size, &__default.uv0, &__default.uv1, &__default.tint_col, &__default.border_col);
}
extern "c" fn _ZN5ImGui11ImageButtonEPKcPvRK6ImVec2S5_S5_RK6ImVec4S8_(str_id: ?[*:0]const u8, user_texture_id: ImTextureID, size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, bg_col: *const ImVec4, tint_col: *const ImVec4) bool;
pub fn ImageButton(str_id: ?[*:0]const u8, user_texture_id: ImTextureID, size: ImVec2, __default: struct{uv0: ImVec2= .{.x=0, .y=0}, uv1: ImVec2= ImVec2(1,1), bg_col: ImVec4= ImVec4(0,0,0,0), tint_col: ImVec4= ImVec4(1,1,1,1)}) bool
{
    return _ZN5ImGui11ImageButtonEPKcPvRK6ImVec2S5_S5_RK6ImVec4S8_(str_id, user_texture_id, &size, &__default.uv0, &__default.uv1, &__default.bg_col, &__default.tint_col);
}
extern "c" fn _ZN5ImGui10BeginComboEPKcS1_i(label: ?[*:0]const u8, preview_value: ?[*:0]const u8, flags: c_int) bool;
pub fn BeginCombo(label: ?[*:0]const u8, preview_value: ?[*:0]const u8, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui10BeginComboEPKcS1_i(label, preview_value, __default.flags);
}
extern "c" fn _ZN5ImGui8EndComboEv() void;
pub fn EndCombo() void
{
    return _ZN5ImGui8EndComboEv();
}
extern "c" fn _ZN5ImGui5ComboEPKcPiPKS1_ii(label: ?[*:0]const u8, current_item: ?*c_int, items: ?*const ?*i8, items_count: c_int, popup_max_height_in_items: c_int) bool;
pub fn Combo(label: ?[*:0]const u8, current_item: ?*c_int, items: ?*const ?*i8, items_count: c_int, __default: struct{popup_max_height_in_items: c_int= -1}) bool
{
    return _ZN5ImGui5ComboEPKcPiPKS1_ii(label, current_item, items, items_count, __default.popup_max_height_in_items);
}
extern "c" fn _ZN5ImGui5ComboEPKcPiS1_i(label: ?[*:0]const u8, current_item: ?*c_int, items_separated_by_zeros: ?[*:0]const u8, popup_max_height_in_items: c_int) bool;
pub fn Combo_2(label: ?[*:0]const u8, current_item: ?*c_int, items_separated_by_zeros: ?[*:0]const u8, __default: struct{popup_max_height_in_items: c_int= -1}) bool
{
    return _ZN5ImGui5ComboEPKcPiS1_i(label, current_item, items_separated_by_zeros, __default.popup_max_height_in_items);
}
extern "c" fn _ZN5ImGui5ComboEPKcPiPFbPviPS1_ES3_ii(label: ?[*:0]const u8, current_item: ?*c_int, items_getter: ?*const fn (data: ?*anyopaque, idx: c_int, out_text: ?*?[*:0]const u8) bool, data: ?*anyopaque, items_count: c_int, popup_max_height_in_items: c_int) bool;
pub fn Combo_3(label: ?[*:0]const u8, current_item: ?*c_int, items_getter: ?*const fn (data: ?*anyopaque, idx: c_int, out_text: ?*?[*:0]const u8) bool, data: ?*anyopaque, items_count: c_int, __default: struct{popup_max_height_in_items: c_int= -1}) bool
{
    return _ZN5ImGui5ComboEPKcPiPFbPviPS1_ES3_ii(label, current_item, items_getter, data, items_count, __default.popup_max_height_in_items);
}
extern "c" fn _ZN5ImGui9DragFloatEPKcPffffS1_i(label: ?[*:0]const u8, v: ?*f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragFloat(label: ?[*:0]const u8, v: ?*f32, __default: struct{v_speed: f32= 1.0, v_min: f32= 0.0, v_max: f32= 0.0, format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui9DragFloatEPKcPffffS1_i(label, v, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui10DragFloat2EPKcPffffS1_i(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragFloat2(label: ?[*:0]const u8, v: *f32, __default: struct{v_speed: f32= 1.0, v_min: f32= 0.0, v_max: f32= 0.0, format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui10DragFloat2EPKcPffffS1_i(label, v, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui10DragFloat3EPKcPffffS1_i(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragFloat3(label: ?[*:0]const u8, v: *f32, __default: struct{v_speed: f32= 1.0, v_min: f32= 0.0, v_max: f32= 0.0, format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui10DragFloat3EPKcPffffS1_i(label, v, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui10DragFloat4EPKcPffffS1_i(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragFloat4(label: ?[*:0]const u8, v: *f32, __default: struct{v_speed: f32= 1.0, v_min: f32= 0.0, v_max: f32= 0.0, format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui10DragFloat4EPKcPffffS1_i(label, v, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui15DragFloatRange2EPKcPfS2_fffS1_S1_i(label: ?[*:0]const u8, v_current_min: ?*f32, v_current_max: ?*f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, format_max: ?[*:0]const u8, flags: c_int) bool;
pub fn DragFloatRange2(label: ?[*:0]const u8, v_current_min: ?*f32, v_current_max: ?*f32, __default: struct{v_speed: f32= 1.0, v_min: f32= 0.0, v_max: f32= 0.0, format: ?[*:0]const u8= "%.3f", format_max: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui15DragFloatRange2EPKcPfS2_fffS1_S1_i(label, v_current_min, v_current_max, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.format_max, __default.flags);
}
extern "c" fn _ZN5ImGui7DragIntEPKcPifiiS1_i(label: ?[*:0]const u8, v: ?*c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragInt(label: ?[*:0]const u8, v: ?*c_int, __default: struct{v_speed: f32= 1.0, v_min: c_int= 0, v_max: c_int= 0, format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui7DragIntEPKcPifiiS1_i(label, v, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui8DragInt2EPKcPifiiS1_i(label: ?[*:0]const u8, v: *c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragInt2(label: ?[*:0]const u8, v: *c_int, __default: struct{v_speed: f32= 1.0, v_min: c_int= 0, v_max: c_int= 0, format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui8DragInt2EPKcPifiiS1_i(label, v, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui8DragInt3EPKcPifiiS1_i(label: ?[*:0]const u8, v: *c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragInt3(label: ?[*:0]const u8, v: *c_int, __default: struct{v_speed: f32= 1.0, v_min: c_int= 0, v_max: c_int= 0, format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui8DragInt3EPKcPifiiS1_i(label, v, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui8DragInt4EPKcPifiiS1_i(label: ?[*:0]const u8, v: *c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragInt4(label: ?[*:0]const u8, v: *c_int, __default: struct{v_speed: f32= 1.0, v_min: c_int= 0, v_max: c_int= 0, format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui8DragInt4EPKcPifiiS1_i(label, v, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui13DragIntRange2EPKcPiS2_fiiS1_S1_i(label: ?[*:0]const u8, v_current_min: ?*c_int, v_current_max: ?*c_int, v_speed: f32, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, format_max: ?[*:0]const u8, flags: c_int) bool;
pub fn DragIntRange2(label: ?[*:0]const u8, v_current_min: ?*c_int, v_current_max: ?*c_int, __default: struct{v_speed: f32= 1.0, v_min: c_int= 0, v_max: c_int= 0, format: ?[*:0]const u8= "%d", format_max: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui13DragIntRange2EPKcPiS2_fiiS1_S1_i(label, v_current_min, v_current_max, __default.v_speed, __default.v_min, __default.v_max, __default.format, __default.format_max, __default.flags);
}
extern "c" fn _ZN5ImGui10DragScalarEPKciPvfPKvS4_S1_i(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, v_speed: f32, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragScalar(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, __default: struct{v_speed: f32= 1.0, p_min: ?*const anyopaque= null, p_max: ?*const anyopaque= null, format: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui10DragScalarEPKciPvfPKvS4_S1_i(label, data_type, p_data, __default.v_speed, __default.p_min, __default.p_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui11DragScalarNEPKciPvifPKvS4_S1_i(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, v_speed: f32, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, flags: c_int) bool;
pub fn DragScalarN(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, __default: struct{v_speed: f32= 1.0, p_min: ?*const anyopaque= null, p_max: ?*const anyopaque= null, format: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui11DragScalarNEPKciPvifPKvS4_S1_i(label, data_type, p_data, components, __default.v_speed, __default.p_min, __default.p_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui11SliderFloatEPKcPfffS1_i(label: ?[*:0]const u8, v: ?*f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderFloat(label: ?[*:0]const u8, v: ?*f32, v_min: f32, v_max: f32, __default: struct{format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui11SliderFloatEPKcPfffS1_i(label, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui12SliderFloat2EPKcPfffS1_i(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderFloat2(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, __default: struct{format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui12SliderFloat2EPKcPfffS1_i(label, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui12SliderFloat3EPKcPfffS1_i(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderFloat3(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, __default: struct{format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui12SliderFloat3EPKcPfffS1_i(label, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui12SliderFloat4EPKcPfffS1_i(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderFloat4(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, __default: struct{format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui12SliderFloat4EPKcPfffS1_i(label, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui11SliderAngleEPKcPfffS1_i(label: ?[*:0]const u8, v_rad: ?*f32, v_degrees_min: f32, v_degrees_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderAngle(label: ?[*:0]const u8, v_rad: ?*f32, __default: struct{v_degrees_min: f32= -360.0, v_degrees_max: f32= 360.0, format: ?[*:0]const u8= "%.0f deg", flags: c_int= 0}) bool
{
    return _ZN5ImGui11SliderAngleEPKcPfffS1_i(label, v_rad, __default.v_degrees_min, __default.v_degrees_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui9SliderIntEPKcPiiiS1_i(label: ?[*:0]const u8, v: ?*c_int, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderInt(label: ?[*:0]const u8, v: ?*c_int, v_min: c_int, v_max: c_int, __default: struct{format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui9SliderIntEPKcPiiiS1_i(label, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui10SliderInt2EPKcPiiiS1_i(label: ?[*:0]const u8, v: *c_int, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderInt2(label: ?[*:0]const u8, v: *c_int, v_min: c_int, v_max: c_int, __default: struct{format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui10SliderInt2EPKcPiiiS1_i(label, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui10SliderInt3EPKcPiiiS1_i(label: ?[*:0]const u8, v: *c_int, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderInt3(label: ?[*:0]const u8, v: *c_int, v_min: c_int, v_max: c_int, __default: struct{format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui10SliderInt3EPKcPiiiS1_i(label, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui10SliderInt4EPKcPiiiS1_i(label: ?[*:0]const u8, v: *c_int, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderInt4(label: ?[*:0]const u8, v: *c_int, v_min: c_int, v_max: c_int, __default: struct{format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui10SliderInt4EPKcPiiiS1_i(label, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui12SliderScalarEPKciPvPKvS4_S1_i(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderScalar(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, p_min: ?*const anyopaque, p_max: ?*const anyopaque, __default: struct{format: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui12SliderScalarEPKciPvPKvS4_S1_i(label, data_type, p_data, p_min, p_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui13SliderScalarNEPKciPviPKvS4_S1_i(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, flags: c_int) bool;
pub fn SliderScalarN(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, p_min: ?*const anyopaque, p_max: ?*const anyopaque, __default: struct{format: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui13SliderScalarNEPKciPviPKvS4_S1_i(label, data_type, p_data, components, p_min, p_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui12VSliderFloatEPKcRK6ImVec2PfffS1_i(label: ?[*:0]const u8, size: *const ImVec2, v: ?*f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn VSliderFloat(label: ?[*:0]const u8, size: ImVec2, v: ?*f32, v_min: f32, v_max: f32, __default: struct{format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui12VSliderFloatEPKcRK6ImVec2PfffS1_i(label, &size, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui10VSliderIntEPKcRK6ImVec2PiiiS1_i(label: ?[*:0]const u8, size: *const ImVec2, v: ?*c_int, v_min: c_int, v_max: c_int, format: ?[*:0]const u8, flags: c_int) bool;
pub fn VSliderInt(label: ?[*:0]const u8, size: ImVec2, v: ?*c_int, v_min: c_int, v_max: c_int, __default: struct{format: ?[*:0]const u8= "%d", flags: c_int= 0}) bool
{
    return _ZN5ImGui10VSliderIntEPKcRK6ImVec2PiiiS1_i(label, &size, v, v_min, v_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui13VSliderScalarEPKcRK6ImVec2iPvPKvS7_S1_i(label: ?[*:0]const u8, size: *const ImVec2, data_type: c_int, p_data: ?*anyopaque, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, flags: c_int) bool;
pub fn VSliderScalar(label: ?[*:0]const u8, size: ImVec2, data_type: c_int, p_data: ?*anyopaque, p_min: ?*const anyopaque, p_max: ?*const anyopaque, __default: struct{format: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui13VSliderScalarEPKcRK6ImVec2iPvPKvS7_S1_i(label, &size, data_type, p_data, p_min, p_max, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui9InputTextEPKcPcyiPFiP26ImGuiInputTextCallbackDataEPv(label: ?[*:0]const u8, buf: ?*i8, buf_size: usize, flags: c_int, callback: *const ImGuiInputTextCallback, user_data: ?*anyopaque) bool;
pub fn InputText(label: ?[*:0]const u8, buf: ?*i8, buf_size: usize, __default: struct{flags: c_int= 0, callback: *const ImGuiInputTextCallback= null, user_data: ?*anyopaque= null}) bool
{
    return _ZN5ImGui9InputTextEPKcPcyiPFiP26ImGuiInputTextCallbackDataEPv(label, buf, buf_size, __default.flags, __default.callback, __default.user_data);
}
extern "c" fn _ZN5ImGui18InputTextMultilineEPKcPcyRK6ImVec2iPFiP26ImGuiInputTextCallbackDataEPv(label: ?[*:0]const u8, buf: ?*i8, buf_size: usize, size: *const ImVec2, flags: c_int, callback: *const ImGuiInputTextCallback, user_data: ?*anyopaque) bool;
pub fn InputTextMultiline(label: ?[*:0]const u8, buf: ?*i8, buf_size: usize, __default: struct{size: ImVec2= .{.x=0, .y=0}, flags: c_int= 0, callback: *const ImGuiInputTextCallback= null, user_data: ?*anyopaque= null}) bool
{
    return _ZN5ImGui18InputTextMultilineEPKcPcyRK6ImVec2iPFiP26ImGuiInputTextCallbackDataEPv(label, buf, buf_size, &__default.size, __default.flags, __default.callback, __default.user_data);
}
extern "c" fn _ZN5ImGui17InputTextWithHintEPKcS1_PcyiPFiP26ImGuiInputTextCallbackDataEPv(label: ?[*:0]const u8, hint: ?[*:0]const u8, buf: ?*i8, buf_size: usize, flags: c_int, callback: *const ImGuiInputTextCallback, user_data: ?*anyopaque) bool;
pub fn InputTextWithHint(label: ?[*:0]const u8, hint: ?[*:0]const u8, buf: ?*i8, buf_size: usize, __default: struct{flags: c_int= 0, callback: *const ImGuiInputTextCallback= null, user_data: ?*anyopaque= null}) bool
{
    return _ZN5ImGui17InputTextWithHintEPKcS1_PcyiPFiP26ImGuiInputTextCallbackDataEPv(label, hint, buf, buf_size, __default.flags, __default.callback, __default.user_data);
}
extern "c" fn _ZN5ImGui10InputFloatEPKcPfffS1_i(label: ?[*:0]const u8, v: ?*f32, step: f32, step_fast: f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn InputFloat(label: ?[*:0]const u8, v: ?*f32, __default: struct{step: f32= 0.0, step_fast: f32= 0.0, format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui10InputFloatEPKcPfffS1_i(label, v, __default.step, __default.step_fast, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui11InputFloat2EPKcPfS1_i(label: ?[*:0]const u8, v: *f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn InputFloat2(label: ?[*:0]const u8, v: *f32, __default: struct{format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui11InputFloat2EPKcPfS1_i(label, v, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui11InputFloat3EPKcPfS1_i(label: ?[*:0]const u8, v: *f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn InputFloat3(label: ?[*:0]const u8, v: *f32, __default: struct{format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui11InputFloat3EPKcPfS1_i(label, v, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui11InputFloat4EPKcPfS1_i(label: ?[*:0]const u8, v: *f32, format: ?[*:0]const u8, flags: c_int) bool;
pub fn InputFloat4(label: ?[*:0]const u8, v: *f32, __default: struct{format: ?[*:0]const u8= "%.3f", flags: c_int= 0}) bool
{
    return _ZN5ImGui11InputFloat4EPKcPfS1_i(label, v, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui8InputIntEPKcPiiii(label: ?[*:0]const u8, v: ?*c_int, step: c_int, step_fast: c_int, flags: c_int) bool;
pub fn InputInt(label: ?[*:0]const u8, v: ?*c_int, __default: struct{step: c_int= 1, step_fast: c_int= 100, flags: c_int= 0}) bool
{
    return _ZN5ImGui8InputIntEPKcPiiii(label, v, __default.step, __default.step_fast, __default.flags);
}
extern "c" fn _ZN5ImGui9InputInt2EPKcPii(label: ?[*:0]const u8, v: *c_int, flags: c_int) bool;
pub fn InputInt2(label: ?[*:0]const u8, v: *c_int, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui9InputInt2EPKcPii(label, v, __default.flags);
}
extern "c" fn _ZN5ImGui9InputInt3EPKcPii(label: ?[*:0]const u8, v: *c_int, flags: c_int) bool;
pub fn InputInt3(label: ?[*:0]const u8, v: *c_int, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui9InputInt3EPKcPii(label, v, __default.flags);
}
extern "c" fn _ZN5ImGui9InputInt4EPKcPii(label: ?[*:0]const u8, v: *c_int, flags: c_int) bool;
pub fn InputInt4(label: ?[*:0]const u8, v: *c_int, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui9InputInt4EPKcPii(label, v, __default.flags);
}
extern "c" fn _ZN5ImGui11InputDoubleEPKcPdddS1_i(label: ?[*:0]const u8, v: ?*f64, step: f64, step_fast: f64, format: ?[*:0]const u8, flags: c_int) bool;
pub fn InputDouble(label: ?[*:0]const u8, v: ?*f64, __default: struct{step: f64= 0.0, step_fast: f64= 0.0, format: ?[*:0]const u8= "%.6f", flags: c_int= 0}) bool
{
    return _ZN5ImGui11InputDoubleEPKcPdddS1_i(label, v, __default.step, __default.step_fast, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui11InputScalarEPKciPvPKvS4_S1_i(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, p_step: ?*const anyopaque, p_step_fast: ?*const anyopaque, format: ?[*:0]const u8, flags: c_int) bool;
pub fn InputScalar(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, __default: struct{p_step: ?*const anyopaque= null, p_step_fast: ?*const anyopaque= null, format: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui11InputScalarEPKciPvPKvS4_S1_i(label, data_type, p_data, __default.p_step, __default.p_step_fast, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui12InputScalarNEPKciPviPKvS4_S1_i(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, p_step: ?*const anyopaque, p_step_fast: ?*const anyopaque, format: ?[*:0]const u8, flags: c_int) bool;
pub fn InputScalarN(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, __default: struct{p_step: ?*const anyopaque= null, p_step_fast: ?*const anyopaque= null, format: ?[*:0]const u8= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui12InputScalarNEPKciPviPKvS4_S1_i(label, data_type, p_data, components, __default.p_step, __default.p_step_fast, __default.format, __default.flags);
}
extern "c" fn _ZN5ImGui10ColorEdit3EPKcPfi(label: ?[*:0]const u8, col: *f32, flags: c_int) bool;
pub fn ColorEdit3(label: ?[*:0]const u8, col: *f32, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui10ColorEdit3EPKcPfi(label, col, __default.flags);
}
extern "c" fn _ZN5ImGui10ColorEdit4EPKcPfi(label: ?[*:0]const u8, col: *f32, flags: c_int) bool;
pub fn ColorEdit4(label: ?[*:0]const u8, col: *f32, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui10ColorEdit4EPKcPfi(label, col, __default.flags);
}
extern "c" fn _ZN5ImGui12ColorPicker3EPKcPfi(label: ?[*:0]const u8, col: *f32, flags: c_int) bool;
pub fn ColorPicker3(label: ?[*:0]const u8, col: *f32, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui12ColorPicker3EPKcPfi(label, col, __default.flags);
}
extern "c" fn _ZN5ImGui12ColorPicker4EPKcPfiPKf(label: ?[*:0]const u8, col: *f32, flags: c_int, ref_col: ?*const f32) bool;
pub fn ColorPicker4(label: ?[*:0]const u8, col: *f32, __default: struct{flags: c_int= 0, ref_col: ?*const f32= null}) bool
{
    return _ZN5ImGui12ColorPicker4EPKcPfiPKf(label, col, __default.flags, __default.ref_col);
}
extern "c" fn _ZN5ImGui11ColorButtonEPKcRK6ImVec4iRK6ImVec2(desc_id: ?[*:0]const u8, col: *const ImVec4, flags: c_int, size: *const ImVec2) bool;
pub fn ColorButton(desc_id: ?[*:0]const u8, col: ImVec4, __default: struct{flags: c_int= 0, size: ImVec2= .{.x=0, .y=0}}) bool
{
    return _ZN5ImGui11ColorButtonEPKcRK6ImVec4iRK6ImVec2(desc_id, &col, __default.flags, &__default.size);
}
extern "c" fn _ZN5ImGui19SetColorEditOptionsEi(flags: c_int) void;
pub fn SetColorEditOptions(flags: c_int) void
{
    return _ZN5ImGui19SetColorEditOptionsEi(flags);
}
extern "c" fn _ZN5ImGui8TreeNodeEPKc(label: ?[*:0]const u8) bool;
pub fn TreeNode(label: ?[*:0]const u8) bool
{
    return _ZN5ImGui8TreeNodeEPKc(label);
}
extern "c" fn _ZN5ImGui8TreeNodeEPKcS1_z(str_id: ?[*:0]const u8, fmt: ?[*:0]const u8, ...) bool;
pub fn TreeNode_2(str_id: ?[*:0]const u8, fmt: ?[*:0]const u8, __va__: anytype) bool
{
    return @call(.{}, _ZN5ImGui8TreeNodeEPKcS1_z, .{str_id, fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui8TreeNodeEPKvPKcz(ptr_id: ?*const anyopaque, fmt: ?[*:0]const u8, ...) bool;
pub fn TreeNode_3(ptr_id: ?*const anyopaque, fmt: ?[*:0]const u8, __va__: anytype) bool
{
    return @call(.{}, _ZN5ImGui8TreeNodeEPKvPKcz, .{ptr_id, fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui9TreeNodeVEPKcS1_i(str_id: ?[*:0]const u8, fmt: ?[*:0]const u8, args: c_int) bool;
pub fn TreeNodeV(str_id: ?[*:0]const u8, fmt: ?[*:0]const u8, args: c_int) bool
{
    return _ZN5ImGui9TreeNodeVEPKcS1_i(str_id, fmt, args);
}
extern "c" fn _ZN5ImGui9TreeNodeVEPKvPKci(ptr_id: ?*const anyopaque, fmt: ?[*:0]const u8, args: c_int) bool;
pub fn TreeNodeV_2(ptr_id: ?*const anyopaque, fmt: ?[*:0]const u8, args: c_int) bool
{
    return _ZN5ImGui9TreeNodeVEPKvPKci(ptr_id, fmt, args);
}
extern "c" fn _ZN5ImGui10TreeNodeExEPKci(label: ?[*:0]const u8, flags: c_int) bool;
pub fn TreeNodeEx(label: ?[*:0]const u8, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui10TreeNodeExEPKci(label, __default.flags);
}
extern "c" fn _ZN5ImGui10TreeNodeExEPKciS1_z(str_id: ?[*:0]const u8, flags: c_int, fmt: ?[*:0]const u8, ...) bool;
pub fn TreeNodeEx_2(str_id: ?[*:0]const u8, flags: c_int, fmt: ?[*:0]const u8, __va__: anytype) bool
{
    return @call(.{}, _ZN5ImGui10TreeNodeExEPKciS1_z, .{str_id, flags, fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui10TreeNodeExEPKviPKcz(ptr_id: ?*const anyopaque, flags: c_int, fmt: ?[*:0]const u8, ...) bool;
pub fn TreeNodeEx_3(ptr_id: ?*const anyopaque, flags: c_int, fmt: ?[*:0]const u8, __va__: anytype) bool
{
    return @call(.{}, _ZN5ImGui10TreeNodeExEPKviPKcz, .{ptr_id, flags, fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui11TreeNodeExVEPKciS1_i(str_id: ?[*:0]const u8, flags: c_int, fmt: ?[*:0]const u8, args: c_int) bool;
pub fn TreeNodeExV(str_id: ?[*:0]const u8, flags: c_int, fmt: ?[*:0]const u8, args: c_int) bool
{
    return _ZN5ImGui11TreeNodeExVEPKciS1_i(str_id, flags, fmt, args);
}
extern "c" fn _ZN5ImGui11TreeNodeExVEPKviPKci(ptr_id: ?*const anyopaque, flags: c_int, fmt: ?[*:0]const u8, args: c_int) bool;
pub fn TreeNodeExV_2(ptr_id: ?*const anyopaque, flags: c_int, fmt: ?[*:0]const u8, args: c_int) bool
{
    return _ZN5ImGui11TreeNodeExVEPKviPKci(ptr_id, flags, fmt, args);
}
extern "c" fn _ZN5ImGui8TreePushEPKc(str_id: ?[*:0]const u8) void;
pub fn TreePush(str_id: ?[*:0]const u8) void
{
    return _ZN5ImGui8TreePushEPKc(str_id);
}
extern "c" fn _ZN5ImGui8TreePushEPKv(ptr_id: ?*const anyopaque) void;
pub fn TreePush_2(__default: struct{ptr_id: ?*const anyopaque= null}) void
{
    return _ZN5ImGui8TreePushEPKv(__default.ptr_id);
}
extern "c" fn _ZN5ImGui7TreePopEv() void;
pub fn TreePop() void
{
    return _ZN5ImGui7TreePopEv();
}
extern "c" fn _ZN5ImGui25GetTreeNodeToLabelSpacingEv() f32;
pub fn GetTreeNodeToLabelSpacing() f32
{
    return _ZN5ImGui25GetTreeNodeToLabelSpacingEv();
}
extern "c" fn _ZN5ImGui16CollapsingHeaderEPKci(label: ?[*:0]const u8, flags: c_int) bool;
pub fn CollapsingHeader(label: ?[*:0]const u8, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui16CollapsingHeaderEPKci(label, __default.flags);
}
extern "c" fn _ZN5ImGui16CollapsingHeaderEPKcPbi(label: ?[*:0]const u8, p_visible: ?*bool, flags: c_int) bool;
pub fn CollapsingHeader_2(label: ?[*:0]const u8, p_visible: ?*bool, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui16CollapsingHeaderEPKcPbi(label, p_visible, __default.flags);
}
extern "c" fn _ZN5ImGui15SetNextItemOpenEbi(is_open: bool, cond: c_int) void;
pub fn SetNextItemOpen(is_open: bool, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui15SetNextItemOpenEbi(is_open, __default.cond);
}
extern "c" fn _ZN5ImGui10SelectableEPKcbiRK6ImVec2(label: ?[*:0]const u8, selected: bool, flags: c_int, size: *const ImVec2) bool;
pub fn Selectable(label: ?[*:0]const u8, __default: struct{selected: bool= false, flags: c_int= 0, size: ImVec2= .{.x=0, .y=0}}) bool
{
    return _ZN5ImGui10SelectableEPKcbiRK6ImVec2(label, __default.selected, __default.flags, &__default.size);
}
extern "c" fn _ZN5ImGui10SelectableEPKcPbiRK6ImVec2(label: ?[*:0]const u8, p_selected: ?*bool, flags: c_int, size: *const ImVec2) bool;
pub fn Selectable_2(label: ?[*:0]const u8, p_selected: ?*bool, __default: struct{flags: c_int= 0, size: ImVec2= .{.x=0, .y=0}}) bool
{
    return _ZN5ImGui10SelectableEPKcPbiRK6ImVec2(label, p_selected, __default.flags, &__default.size);
}
extern "c" fn _ZN5ImGui12BeginListBoxEPKcRK6ImVec2(label: ?[*:0]const u8, size: *const ImVec2) bool;
pub fn BeginListBox(label: ?[*:0]const u8, __default: struct{size: ImVec2= .{.x=0, .y=0}}) bool
{
    return _ZN5ImGui12BeginListBoxEPKcRK6ImVec2(label, &__default.size);
}
extern "c" fn _ZN5ImGui10EndListBoxEv() void;
pub fn EndListBox() void
{
    return _ZN5ImGui10EndListBoxEv();
}
extern "c" fn _ZN5ImGui7ListBoxEPKcPiPKS1_ii(label: ?[*:0]const u8, current_item: ?*c_int, items: ?*const ?*i8, items_count: c_int, height_in_items: c_int) bool;
pub fn ListBox(label: ?[*:0]const u8, current_item: ?*c_int, items: ?*const ?*i8, items_count: c_int, __default: struct{height_in_items: c_int= -1}) bool
{
    return _ZN5ImGui7ListBoxEPKcPiPKS1_ii(label, current_item, items, items_count, __default.height_in_items);
}
extern "c" fn _ZN5ImGui7ListBoxEPKcPiPFbPviPS1_ES3_ii(label: ?[*:0]const u8, current_item: ?*c_int, items_getter: ?*const fn (data: ?*anyopaque, idx: c_int, out_text: ?*?[*:0]const u8) bool, data: ?*anyopaque, items_count: c_int, height_in_items: c_int) bool;
pub fn ListBox_2(label: ?[*:0]const u8, current_item: ?*c_int, items_getter: ?*const fn (data: ?*anyopaque, idx: c_int, out_text: ?*?[*:0]const u8) bool, data: ?*anyopaque, items_count: c_int, __default: struct{height_in_items: c_int= -1}) bool
{
    return _ZN5ImGui7ListBoxEPKcPiPFbPviPS1_ES3_ii(label, current_item, items_getter, data, items_count, __default.height_in_items);
}
extern "c" fn _ZN5ImGui9PlotLinesEPKcPKfiiS1_ff6ImVec2i(label: ?[*:0]const u8, values: ?*const f32, values_count: c_int, values_offset: c_int, overlay_text: ?[*:0]const u8, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: c_int) void;
pub fn PlotLines(label: ?[*:0]const u8, values: ?*const f32, values_count: c_int, __default: struct{values_offset: c_int= 0, overlay_text: ?[*:0]const u8= null, scale_min: f32= 3.402823466e+38, scale_max: f32= 3.402823466e+38, graph_size: ImVec2= .{.x=0, .y=0}, stride: c_int= @sizeOf(f32)}) void
{
    return _ZN5ImGui9PlotLinesEPKcPKfiiS1_ff6ImVec2i(label, values, values_count, __default.values_offset, __default.overlay_text, __default.scale_min, __default.scale_max, __default.graph_size, __default.stride);
}
extern "c" fn _ZN5ImGui9PlotLinesEPKcPFfPviES2_iiS1_ff6ImVec2(label: ?[*:0]const u8, values_getter: ?*const fn (data: ?*anyopaque, idx: c_int) f32, data: ?*anyopaque, values_count: c_int, values_offset: c_int, overlay_text: ?[*:0]const u8, scale_min: f32, scale_max: f32, graph_size: ImVec2) void;
pub fn PlotLines_2(label: ?[*:0]const u8, values_getter: ?*const fn (data: ?*anyopaque, idx: c_int) f32, data: ?*anyopaque, values_count: c_int, __default: struct{values_offset: c_int= 0, overlay_text: ?[*:0]const u8= null, scale_min: f32= 3.402823466e+38, scale_max: f32= 3.402823466e+38, graph_size: ImVec2= .{.x=0, .y=0}}) void
{
    return _ZN5ImGui9PlotLinesEPKcPFfPviES2_iiS1_ff6ImVec2(label, values_getter, data, values_count, __default.values_offset, __default.overlay_text, __default.scale_min, __default.scale_max, __default.graph_size);
}
extern "c" fn _ZN5ImGui13PlotHistogramEPKcPKfiiS1_ff6ImVec2i(label: ?[*:0]const u8, values: ?*const f32, values_count: c_int, values_offset: c_int, overlay_text: ?[*:0]const u8, scale_min: f32, scale_max: f32, graph_size: ImVec2, stride: c_int) void;
pub fn PlotHistogram(label: ?[*:0]const u8, values: ?*const f32, values_count: c_int, __default: struct{values_offset: c_int= 0, overlay_text: ?[*:0]const u8= null, scale_min: f32= 3.402823466e+38, scale_max: f32= 3.402823466e+38, graph_size: ImVec2= .{.x=0, .y=0}, stride: c_int= @sizeOf(f32)}) void
{
    return _ZN5ImGui13PlotHistogramEPKcPKfiiS1_ff6ImVec2i(label, values, values_count, __default.values_offset, __default.overlay_text, __default.scale_min, __default.scale_max, __default.graph_size, __default.stride);
}
extern "c" fn _ZN5ImGui13PlotHistogramEPKcPFfPviES2_iiS1_ff6ImVec2(label: ?[*:0]const u8, values_getter: ?*const fn (data: ?*anyopaque, idx: c_int) f32, data: ?*anyopaque, values_count: c_int, values_offset: c_int, overlay_text: ?[*:0]const u8, scale_min: f32, scale_max: f32, graph_size: ImVec2) void;
pub fn PlotHistogram_2(label: ?[*:0]const u8, values_getter: ?*const fn (data: ?*anyopaque, idx: c_int) f32, data: ?*anyopaque, values_count: c_int, __default: struct{values_offset: c_int= 0, overlay_text: ?[*:0]const u8= null, scale_min: f32= 3.402823466e+38, scale_max: f32= 3.402823466e+38, graph_size: ImVec2= .{.x=0, .y=0}}) void
{
    return _ZN5ImGui13PlotHistogramEPKcPFfPviES2_iiS1_ff6ImVec2(label, values_getter, data, values_count, __default.values_offset, __default.overlay_text, __default.scale_min, __default.scale_max, __default.graph_size);
}
extern "c" fn _ZN5ImGui5ValueEPKcb(prefix: ?[*:0]const u8, b: bool) void;
pub fn Value(prefix: ?[*:0]const u8, b: bool) void
{
    return _ZN5ImGui5ValueEPKcb(prefix, b);
}
extern "c" fn _ZN5ImGui5ValueEPKci(prefix: ?[*:0]const u8, v: c_int) void;
pub fn Value_2(prefix: ?[*:0]const u8, v: c_int) void
{
    return _ZN5ImGui5ValueEPKci(prefix, v);
}
extern "c" fn _ZN5ImGui5ValueEPKcj(prefix: ?[*:0]const u8, v: c_uint) void;
pub fn Value_3(prefix: ?[*:0]const u8, v: c_uint) void
{
    return _ZN5ImGui5ValueEPKcj(prefix, v);
}
extern "c" fn _ZN5ImGui5ValueEPKcfS1_(prefix: ?[*:0]const u8, v: f32, float_format: ?[*:0]const u8) void;
pub fn Value_4(prefix: ?[*:0]const u8, v: f32, __default: struct{float_format: ?[*:0]const u8= null}) void
{
    return _ZN5ImGui5ValueEPKcfS1_(prefix, v, __default.float_format);
}
extern "c" fn _ZN5ImGui12BeginMenuBarEv() bool;
pub fn BeginMenuBar() bool
{
    return _ZN5ImGui12BeginMenuBarEv();
}
extern "c" fn _ZN5ImGui10EndMenuBarEv() void;
pub fn EndMenuBar() void
{
    return _ZN5ImGui10EndMenuBarEv();
}
extern "c" fn _ZN5ImGui16BeginMainMenuBarEv() bool;
pub fn BeginMainMenuBar() bool
{
    return _ZN5ImGui16BeginMainMenuBarEv();
}
extern "c" fn _ZN5ImGui14EndMainMenuBarEv() void;
pub fn EndMainMenuBar() void
{
    return _ZN5ImGui14EndMainMenuBarEv();
}
extern "c" fn _ZN5ImGui9BeginMenuEPKcb(label: ?[*:0]const u8, enabled: bool) bool;
pub fn BeginMenu(label: ?[*:0]const u8, __default: struct{enabled: bool= true}) bool
{
    return _ZN5ImGui9BeginMenuEPKcb(label, __default.enabled);
}
extern "c" fn _ZN5ImGui7EndMenuEv() void;
pub fn EndMenu() void
{
    return _ZN5ImGui7EndMenuEv();
}
extern "c" fn _ZN5ImGui8MenuItemEPKcS1_bb(label: ?[*:0]const u8, shortcut: ?[*:0]const u8, selected: bool, enabled: bool) bool;
pub fn MenuItem(label: ?[*:0]const u8, __default: struct{shortcut: ?[*:0]const u8= null, selected: bool= false, enabled: bool= true}) bool
{
    return _ZN5ImGui8MenuItemEPKcS1_bb(label, __default.shortcut, __default.selected, __default.enabled);
}
extern "c" fn _ZN5ImGui8MenuItemEPKcS1_Pbb(label: ?[*:0]const u8, shortcut: ?[*:0]const u8, p_selected: ?*bool, enabled: bool) bool;
pub fn MenuItem_2(label: ?[*:0]const u8, shortcut: ?[*:0]const u8, p_selected: ?*bool, __default: struct{enabled: bool= true}) bool
{
    return _ZN5ImGui8MenuItemEPKcS1_Pbb(label, shortcut, p_selected, __default.enabled);
}
extern "c" fn _ZN5ImGui12BeginTooltipEv() void;
pub fn BeginTooltip() void
{
    return _ZN5ImGui12BeginTooltipEv();
}
extern "c" fn _ZN5ImGui10EndTooltipEv() void;
pub fn EndTooltip() void
{
    return _ZN5ImGui10EndTooltipEv();
}
extern "c" fn _ZN5ImGui10SetTooltipEPKcz(fmt: ?[*:0]const u8, ...) void;
pub fn SetTooltip(fmt: ?[*:0]const u8, __va__: anytype) void
{
    return @call(.{}, _ZN5ImGui10SetTooltipEPKcz, .{fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui11SetTooltipVEPKci(fmt: ?[*:0]const u8, args: c_int) void;
pub fn SetTooltipV(fmt: ?[*:0]const u8, args: c_int) void
{
    return _ZN5ImGui11SetTooltipVEPKci(fmt, args);
}
extern "c" fn _ZN5ImGui10BeginPopupEPKci(str_id: ?[*:0]const u8, flags: c_int) bool;
pub fn BeginPopup(str_id: ?[*:0]const u8, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui10BeginPopupEPKci(str_id, __default.flags);
}
extern "c" fn _ZN5ImGui15BeginPopupModalEPKcPbi(name: ?[*:0]const u8, p_open: ?*bool, flags: c_int) bool;
pub fn BeginPopupModal(name: ?[*:0]const u8, __default: struct{p_open: ?*bool= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui15BeginPopupModalEPKcPbi(name, __default.p_open, __default.flags);
}
extern "c" fn _ZN5ImGui8EndPopupEv() void;
pub fn EndPopup() void
{
    return _ZN5ImGui8EndPopupEv();
}
extern "c" fn _ZN5ImGui9OpenPopupEPKci(str_id: ?[*:0]const u8, popup_flags: c_int) void;
pub fn OpenPopup(str_id: ?[*:0]const u8, __default: struct{popup_flags: c_int= 0}) void
{
    return _ZN5ImGui9OpenPopupEPKci(str_id, __default.popup_flags);
}
extern "c" fn _ZN5ImGui9OpenPopupEji(_id: c_uint, popup_flags: c_int) void;
pub fn OpenPopup_2(_id: c_uint, __default: struct{popup_flags: c_int= 0}) void
{
    return _ZN5ImGui9OpenPopupEji(_id, __default.popup_flags);
}
extern "c" fn _ZN5ImGui20OpenPopupOnItemClickEPKci(str_id: ?[*:0]const u8, popup_flags: c_int) void;
pub fn OpenPopupOnItemClick(__default: struct{str_id: ?[*:0]const u8= null, popup_flags: c_int= 1}) void
{
    return _ZN5ImGui20OpenPopupOnItemClickEPKci(__default.str_id, __default.popup_flags);
}
extern "c" fn _ZN5ImGui17CloseCurrentPopupEv() void;
pub fn CloseCurrentPopup() void
{
    return _ZN5ImGui17CloseCurrentPopupEv();
}
extern "c" fn _ZN5ImGui21BeginPopupContextItemEPKci(str_id: ?[*:0]const u8, popup_flags: c_int) bool;
pub fn BeginPopupContextItem(__default: struct{str_id: ?[*:0]const u8= null, popup_flags: c_int= 1}) bool
{
    return _ZN5ImGui21BeginPopupContextItemEPKci(__default.str_id, __default.popup_flags);
}
extern "c" fn _ZN5ImGui23BeginPopupContextWindowEPKci(str_id: ?[*:0]const u8, popup_flags: c_int) bool;
pub fn BeginPopupContextWindow(__default: struct{str_id: ?[*:0]const u8= null, popup_flags: c_int= 1}) bool
{
    return _ZN5ImGui23BeginPopupContextWindowEPKci(__default.str_id, __default.popup_flags);
}
extern "c" fn _ZN5ImGui21BeginPopupContextVoidEPKci(str_id: ?[*:0]const u8, popup_flags: c_int) bool;
pub fn BeginPopupContextVoid(__default: struct{str_id: ?[*:0]const u8= null, popup_flags: c_int= 1}) bool
{
    return _ZN5ImGui21BeginPopupContextVoidEPKci(__default.str_id, __default.popup_flags);
}
extern "c" fn _ZN5ImGui11IsPopupOpenEPKci(str_id: ?[*:0]const u8, flags: c_int) bool;
pub fn IsPopupOpen(str_id: ?[*:0]const u8, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui11IsPopupOpenEPKci(str_id, __default.flags);
}
extern "c" fn _ZN5ImGui10BeginTableEPKciiRK6ImVec2f(str_id: ?[*:0]const u8, column: c_int, flags: c_int, outer_size: *const ImVec2, inner_width: f32) bool;
pub fn BeginTable(str_id: ?[*:0]const u8, column: c_int, __default: struct{flags: c_int= 0, outer_size: ImVec2= ImVec2(0.0,0.0), inner_width: f32= 0.0}) bool
{
    return _ZN5ImGui10BeginTableEPKciiRK6ImVec2f(str_id, column, __default.flags, &__default.outer_size, __default.inner_width);
}
extern "c" fn _ZN5ImGui8EndTableEv() void;
pub fn EndTable() void
{
    return _ZN5ImGui8EndTableEv();
}
extern "c" fn _ZN5ImGui12TableNextRowEif(row_flags: c_int, min_row_height: f32) void;
pub fn TableNextRow(__default: struct{row_flags: c_int= 0, min_row_height: f32= 0.0}) void
{
    return _ZN5ImGui12TableNextRowEif(__default.row_flags, __default.min_row_height);
}
extern "c" fn _ZN5ImGui15TableNextColumnEv() bool;
pub fn TableNextColumn() bool
{
    return _ZN5ImGui15TableNextColumnEv();
}
extern "c" fn _ZN5ImGui19TableSetColumnIndexEi(column_n: c_int) bool;
pub fn TableSetColumnIndex(column_n: c_int) bool
{
    return _ZN5ImGui19TableSetColumnIndexEi(column_n);
}
extern "c" fn _ZN5ImGui16TableSetupColumnEPKcifj(label: ?[*:0]const u8, flags: c_int, init_width_or_weight: f32, user_id: c_uint) void;
pub fn TableSetupColumn(label: ?[*:0]const u8, __default: struct{flags: c_int= 0, init_width_or_weight: f32= 0.0, user_id: c_uint= 0}) void
{
    return _ZN5ImGui16TableSetupColumnEPKcifj(label, __default.flags, __default.init_width_or_weight, __default.user_id);
}
extern "c" fn _ZN5ImGui22TableSetupScrollFreezeEii(cols: c_int, rows: c_int) void;
pub fn TableSetupScrollFreeze(cols: c_int, rows: c_int) void
{
    return _ZN5ImGui22TableSetupScrollFreezeEii(cols, rows);
}
extern "c" fn _ZN5ImGui15TableHeadersRowEv() void;
pub fn TableHeadersRow() void
{
    return _ZN5ImGui15TableHeadersRowEv();
}
extern "c" fn _ZN5ImGui11TableHeaderEPKc(label: ?[*:0]const u8) void;
pub fn TableHeader(label: ?[*:0]const u8) void
{
    return _ZN5ImGui11TableHeaderEPKc(label);
}
extern "c" fn _ZN5ImGui17TableGetSortSpecsEv() ?*ImGuiTableSortSpecs;
pub fn TableGetSortSpecs() ?*ImGuiTableSortSpecs
{
    return _ZN5ImGui17TableGetSortSpecsEv();
}
extern "c" fn _ZN5ImGui19TableGetColumnCountEv() c_int;
pub fn TableGetColumnCount() c_int
{
    return _ZN5ImGui19TableGetColumnCountEv();
}
extern "c" fn _ZN5ImGui19TableGetColumnIndexEv() c_int;
pub fn TableGetColumnIndex() c_int
{
    return _ZN5ImGui19TableGetColumnIndexEv();
}
extern "c" fn _ZN5ImGui16TableGetRowIndexEv() c_int;
pub fn TableGetRowIndex() c_int
{
    return _ZN5ImGui16TableGetRowIndexEv();
}
extern "c" fn _ZN5ImGui18TableGetColumnNameEi(column_n: c_int) ?[*:0]const u8;
pub fn TableGetColumnName(__default: struct{column_n: c_int= -1}) ?[*:0]const u8
{
    return _ZN5ImGui18TableGetColumnNameEi(__default.column_n);
}
extern "c" fn _ZN5ImGui19TableGetColumnFlagsEi(column_n: c_int) c_int;
pub fn TableGetColumnFlags(__default: struct{column_n: c_int= -1}) c_int
{
    return _ZN5ImGui19TableGetColumnFlagsEi(__default.column_n);
}
extern "c" fn _ZN5ImGui21TableSetColumnEnabledEib(column_n: c_int, v: bool) void;
pub fn TableSetColumnEnabled(column_n: c_int, v: bool) void
{
    return _ZN5ImGui21TableSetColumnEnabledEib(column_n, v);
}
extern "c" fn _ZN5ImGui15TableSetBgColorEiji(target: c_int, color: c_uint, column_n: c_int) void;
pub fn TableSetBgColor(target: c_int, color: c_uint, __default: struct{column_n: c_int= -1}) void
{
    return _ZN5ImGui15TableSetBgColorEiji(target, color, __default.column_n);
}
extern "c" fn _ZN5ImGui7ColumnsEiPKcb(count: c_int, _id: ?[*:0]const u8, border: bool) void;
pub fn Columns(__default: struct{count: c_int= 1, _id: ?[*:0]const u8= null, border: bool= true}) void
{
    return _ZN5ImGui7ColumnsEiPKcb(__default.count, __default._id, __default.border);
}
extern "c" fn _ZN5ImGui10NextColumnEv() void;
pub fn NextColumn() void
{
    return _ZN5ImGui10NextColumnEv();
}
extern "c" fn _ZN5ImGui14GetColumnIndexEv() c_int;
pub fn GetColumnIndex() c_int
{
    return _ZN5ImGui14GetColumnIndexEv();
}
extern "c" fn _ZN5ImGui14GetColumnWidthEi(column_index: c_int) f32;
pub fn GetColumnWidth(__default: struct{column_index: c_int= -1}) f32
{
    return _ZN5ImGui14GetColumnWidthEi(__default.column_index);
}
extern "c" fn _ZN5ImGui14SetColumnWidthEif(column_index: c_int, width: f32) void;
pub fn SetColumnWidth(column_index: c_int, width: f32) void
{
    return _ZN5ImGui14SetColumnWidthEif(column_index, width);
}
extern "c" fn _ZN5ImGui15GetColumnOffsetEi(column_index: c_int) f32;
pub fn GetColumnOffset(__default: struct{column_index: c_int= -1}) f32
{
    return _ZN5ImGui15GetColumnOffsetEi(__default.column_index);
}
extern "c" fn _ZN5ImGui15SetColumnOffsetEif(column_index: c_int, offset_x: f32) void;
pub fn SetColumnOffset(column_index: c_int, offset_x: f32) void
{
    return _ZN5ImGui15SetColumnOffsetEif(column_index, offset_x);
}
extern "c" fn _ZN5ImGui15GetColumnsCountEv() c_int;
pub fn GetColumnsCount() c_int
{
    return _ZN5ImGui15GetColumnsCountEv();
}
extern "c" fn _ZN5ImGui11BeginTabBarEPKci(str_id: ?[*:0]const u8, flags: c_int) bool;
pub fn BeginTabBar(str_id: ?[*:0]const u8, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui11BeginTabBarEPKci(str_id, __default.flags);
}
extern "c" fn _ZN5ImGui9EndTabBarEv() void;
pub fn EndTabBar() void
{
    return _ZN5ImGui9EndTabBarEv();
}
extern "c" fn _ZN5ImGui12BeginTabItemEPKcPbi(label: ?[*:0]const u8, p_open: ?*bool, flags: c_int) bool;
pub fn BeginTabItem(label: ?[*:0]const u8, __default: struct{p_open: ?*bool= null, flags: c_int= 0}) bool
{
    return _ZN5ImGui12BeginTabItemEPKcPbi(label, __default.p_open, __default.flags);
}
extern "c" fn _ZN5ImGui10EndTabItemEv() void;
pub fn EndTabItem() void
{
    return _ZN5ImGui10EndTabItemEv();
}
extern "c" fn _ZN5ImGui13TabItemButtonEPKci(label: ?[*:0]const u8, flags: c_int) bool;
pub fn TabItemButton(label: ?[*:0]const u8, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui13TabItemButtonEPKci(label, __default.flags);
}
extern "c" fn _ZN5ImGui16SetTabItemClosedEPKc(tab_or_docked_window_label: ?[*:0]const u8) void;
pub fn SetTabItemClosed(tab_or_docked_window_label: ?[*:0]const u8) void
{
    return _ZN5ImGui16SetTabItemClosedEPKc(tab_or_docked_window_label);
}
extern "c" fn _ZN5ImGui9DockSpaceEjRK6ImVec2iPK16ImGuiWindowClass(_id: c_uint, size: *const ImVec2, flags: c_int, window_class: ?*const ImGuiWindowClass) c_uint;
pub fn DockSpace(_id: c_uint, __default: struct{size: ImVec2= .{.x=0, .y=0}, flags: c_int= 0, window_class: ?*const ImGuiWindowClass= null}) c_uint
{
    return _ZN5ImGui9DockSpaceEjRK6ImVec2iPK16ImGuiWindowClass(_id, &__default.size, __default.flags, __default.window_class);
}
extern "c" fn _ZN5ImGui21DockSpaceOverViewportEPK13ImGuiViewportiPK16ImGuiWindowClass(viewport: ?*const ImGuiViewport, flags: c_int, window_class: ?*const ImGuiWindowClass) c_uint;
pub fn DockSpaceOverViewport(__default: struct{viewport: ?*const ImGuiViewport= null, flags: c_int= 0, window_class: ?*const ImGuiWindowClass= null}) c_uint
{
    return _ZN5ImGui21DockSpaceOverViewportEPK13ImGuiViewportiPK16ImGuiWindowClass(__default.viewport, __default.flags, __default.window_class);
}
extern "c" fn _ZN5ImGui19SetNextWindowDockIDEji(dock_id: c_uint, cond: c_int) void;
pub fn SetNextWindowDockID(dock_id: c_uint, __default: struct{cond: c_int= 0}) void
{
    return _ZN5ImGui19SetNextWindowDockIDEji(dock_id, __default.cond);
}
extern "c" fn _ZN5ImGui18SetNextWindowClassEPK16ImGuiWindowClass(window_class: ?*const ImGuiWindowClass) void;
pub fn SetNextWindowClass(window_class: ?*const ImGuiWindowClass) void
{
    return _ZN5ImGui18SetNextWindowClassEPK16ImGuiWindowClass(window_class);
}
extern "c" fn _ZN5ImGui15GetWindowDockIDEv() c_uint;
pub fn GetWindowDockID() c_uint
{
    return _ZN5ImGui15GetWindowDockIDEv();
}
extern "c" fn _ZN5ImGui14IsWindowDockedEv() bool;
pub fn IsWindowDocked() bool
{
    return _ZN5ImGui14IsWindowDockedEv();
}
extern "c" fn _ZN5ImGui8LogToTTYEi(auto_open_depth: c_int) void;
pub fn LogToTTY(__default: struct{auto_open_depth: c_int= -1}) void
{
    return _ZN5ImGui8LogToTTYEi(__default.auto_open_depth);
}
extern "c" fn _ZN5ImGui9LogToFileEiPKc(auto_open_depth: c_int, filename: ?[*:0]const u8) void;
pub fn LogToFile(__default: struct{auto_open_depth: c_int= -1, filename: ?[*:0]const u8= null}) void
{
    return _ZN5ImGui9LogToFileEiPKc(__default.auto_open_depth, __default.filename);
}
extern "c" fn _ZN5ImGui14LogToClipboardEi(auto_open_depth: c_int) void;
pub fn LogToClipboard(__default: struct{auto_open_depth: c_int= -1}) void
{
    return _ZN5ImGui14LogToClipboardEi(__default.auto_open_depth);
}
extern "c" fn _ZN5ImGui9LogFinishEv() void;
pub fn LogFinish() void
{
    return _ZN5ImGui9LogFinishEv();
}
extern "c" fn _ZN5ImGui10LogButtonsEv() void;
pub fn LogButtons() void
{
    return _ZN5ImGui10LogButtonsEv();
}
extern "c" fn _ZN5ImGui7LogTextEPKcz(fmt: ?[*:0]const u8, ...) void;
pub fn LogText(fmt: ?[*:0]const u8, __va__: anytype) void
{
    return @call(.{}, _ZN5ImGui7LogTextEPKcz, .{fmt} ++ __va__);
}
extern "c" fn _ZN5ImGui8LogTextVEPKci(fmt: ?[*:0]const u8, args: c_int) void;
pub fn LogTextV(fmt: ?[*:0]const u8, args: c_int) void
{
    return _ZN5ImGui8LogTextVEPKci(fmt, args);
}
extern "c" fn _ZN5ImGui19BeginDragDropSourceEi(flags: c_int) bool;
pub fn BeginDragDropSource(__default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui19BeginDragDropSourceEi(__default.flags);
}
extern "c" fn _ZN5ImGui18SetDragDropPayloadEPKcPKvyi(@"type": ?[*:0]const u8, data: ?*const anyopaque, sz: usize, cond: c_int) bool;
pub fn SetDragDropPayload(@"type": ?[*:0]const u8, data: ?*const anyopaque, sz: usize, __default: struct{cond: c_int= 0}) bool
{
    return _ZN5ImGui18SetDragDropPayloadEPKcPKvyi(@"type", data, sz, __default.cond);
}
extern "c" fn _ZN5ImGui17EndDragDropSourceEv() void;
pub fn EndDragDropSource() void
{
    return _ZN5ImGui17EndDragDropSourceEv();
}
extern "c" fn _ZN5ImGui19BeginDragDropTargetEv() bool;
pub fn BeginDragDropTarget() bool
{
    return _ZN5ImGui19BeginDragDropTargetEv();
}
extern "c" fn _ZN5ImGui21AcceptDragDropPayloadEPKci(@"type": ?[*:0]const u8, flags: c_int) ?*ImGuiPayload;
pub fn AcceptDragDropPayload(@"type": ?[*:0]const u8, __default: struct{flags: c_int= 0}) ?*ImGuiPayload
{
    return _ZN5ImGui21AcceptDragDropPayloadEPKci(@"type", __default.flags);
}
extern "c" fn _ZN5ImGui17EndDragDropTargetEv() void;
pub fn EndDragDropTarget() void
{
    return _ZN5ImGui17EndDragDropTargetEv();
}
extern "c" fn _ZN5ImGui18GetDragDropPayloadEv() ?*ImGuiPayload;
pub fn GetDragDropPayload() ?*ImGuiPayload
{
    return _ZN5ImGui18GetDragDropPayloadEv();
}
extern "c" fn _ZN5ImGui13BeginDisabledEb(disabled: bool) void;
pub fn BeginDisabled(__default: struct{disabled: bool= true}) void
{
    return _ZN5ImGui13BeginDisabledEb(__default.disabled);
}
extern "c" fn _ZN5ImGui11EndDisabledEv() void;
pub fn EndDisabled() void
{
    return _ZN5ImGui11EndDisabledEv();
}
extern "c" fn _ZN5ImGui12PushClipRectERK6ImVec2S2_b(clip_rect_min: *const ImVec2, clip_rect_max: *const ImVec2, intersect_with_current_clip_rect: bool) void;
pub fn PushClipRect(clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool) void
{
    return _ZN5ImGui12PushClipRectERK6ImVec2S2_b(&clip_rect_min, &clip_rect_max, intersect_with_current_clip_rect);
}
extern "c" fn _ZN5ImGui11PopClipRectEv() void;
pub fn PopClipRect() void
{
    return _ZN5ImGui11PopClipRectEv();
}
extern "c" fn _ZN5ImGui19SetItemDefaultFocusEv() void;
pub fn SetItemDefaultFocus() void
{
    return _ZN5ImGui19SetItemDefaultFocusEv();
}
extern "c" fn _ZN5ImGui20SetKeyboardFocusHereEi(offset: c_int) void;
pub fn SetKeyboardFocusHere(__default: struct{offset: c_int= 0}) void
{
    return _ZN5ImGui20SetKeyboardFocusHereEi(__default.offset);
}
extern "c" fn _ZN5ImGui13IsItemHoveredEi(flags: c_int) bool;
pub fn IsItemHovered(__default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui13IsItemHoveredEi(__default.flags);
}
extern "c" fn _ZN5ImGui12IsItemActiveEv() bool;
pub fn IsItemActive() bool
{
    return _ZN5ImGui12IsItemActiveEv();
}
extern "c" fn _ZN5ImGui13IsItemFocusedEv() bool;
pub fn IsItemFocused() bool
{
    return _ZN5ImGui13IsItemFocusedEv();
}
extern "c" fn _ZN5ImGui13IsItemClickedEi(mouse_button: c_int) bool;
pub fn IsItemClicked(__default: struct{mouse_button: c_int= 0}) bool
{
    return _ZN5ImGui13IsItemClickedEi(__default.mouse_button);
}
extern "c" fn _ZN5ImGui13IsItemVisibleEv() bool;
pub fn IsItemVisible() bool
{
    return _ZN5ImGui13IsItemVisibleEv();
}
extern "c" fn _ZN5ImGui12IsItemEditedEv() bool;
pub fn IsItemEdited() bool
{
    return _ZN5ImGui12IsItemEditedEv();
}
extern "c" fn _ZN5ImGui15IsItemActivatedEv() bool;
pub fn IsItemActivated() bool
{
    return _ZN5ImGui15IsItemActivatedEv();
}
extern "c" fn _ZN5ImGui17IsItemDeactivatedEv() bool;
pub fn IsItemDeactivated() bool
{
    return _ZN5ImGui17IsItemDeactivatedEv();
}
extern "c" fn _ZN5ImGui26IsItemDeactivatedAfterEditEv() bool;
pub fn IsItemDeactivatedAfterEdit() bool
{
    return _ZN5ImGui26IsItemDeactivatedAfterEditEv();
}
extern "c" fn _ZN5ImGui17IsItemToggledOpenEv() bool;
pub fn IsItemToggledOpen() bool
{
    return _ZN5ImGui17IsItemToggledOpenEv();
}
extern "c" fn _ZN5ImGui16IsAnyItemHoveredEv() bool;
pub fn IsAnyItemHovered() bool
{
    return _ZN5ImGui16IsAnyItemHoveredEv();
}
extern "c" fn _ZN5ImGui15IsAnyItemActiveEv() bool;
pub fn IsAnyItemActive() bool
{
    return _ZN5ImGui15IsAnyItemActiveEv();
}
extern "c" fn _ZN5ImGui16IsAnyItemFocusedEv() bool;
pub fn IsAnyItemFocused() bool
{
    return _ZN5ImGui16IsAnyItemFocusedEv();
}
extern "c" fn imgui_GetItemRectMin(v: *ImVec2) void;
pub fn GetItemRectMin() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetItemRectMin(&v);
    return v;
}

extern "c" fn imgui_GetItemRectMax(v: *ImVec2) void;
pub fn GetItemRectMax() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetItemRectMax(&v);
    return v;
}

extern "c" fn imgui_GetItemRectSize(v: *ImVec2) void;
pub fn GetItemRectSize() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetItemRectSize(&v);
    return v;
}

extern "c" fn _ZN5ImGui19SetItemAllowOverlapEv() void;
pub fn SetItemAllowOverlap() void
{
    return _ZN5ImGui19SetItemAllowOverlapEv();
}
extern "c" fn _ZN5ImGui15GetMainViewportEv() ?*ImGuiViewport;
pub fn GetMainViewport() ?*ImGuiViewport
{
    return _ZN5ImGui15GetMainViewportEv();
}
extern "c" fn _ZN5ImGui21GetBackgroundDrawListEv() ?*ImDrawList;
pub fn GetBackgroundDrawList() ?*ImDrawList
{
    return _ZN5ImGui21GetBackgroundDrawListEv();
}
extern "c" fn _ZN5ImGui21GetForegroundDrawListEv() ?*ImDrawList;
pub fn GetForegroundDrawList() ?*ImDrawList
{
    return _ZN5ImGui21GetForegroundDrawListEv();
}
extern "c" fn _ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport(viewport: ?*ImGuiViewport) ?*ImDrawList;
pub fn GetBackgroundDrawList_2(viewport: ?*ImGuiViewport) ?*ImDrawList
{
    return _ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport(viewport);
}
extern "c" fn _ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport(viewport: ?*ImGuiViewport) ?*ImDrawList;
pub fn GetForegroundDrawList_2(viewport: ?*ImGuiViewport) ?*ImDrawList
{
    return _ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport(viewport);
}
extern "c" fn _ZN5ImGui13IsRectVisibleERK6ImVec2(size: *const ImVec2) bool;
pub fn IsRectVisible(size: ImVec2) bool
{
    return _ZN5ImGui13IsRectVisibleERK6ImVec2(&size);
}
extern "c" fn _ZN5ImGui13IsRectVisibleERK6ImVec2S2_(rect_min: *const ImVec2, rect_max: *const ImVec2) bool;
pub fn IsRectVisible_2(rect_min: ImVec2, rect_max: ImVec2) bool
{
    return _ZN5ImGui13IsRectVisibleERK6ImVec2S2_(&rect_min, &rect_max);
}
extern "c" fn _ZN5ImGui7GetTimeEv() f64;
pub fn GetTime() f64
{
    return _ZN5ImGui7GetTimeEv();
}
extern "c" fn _ZN5ImGui13GetFrameCountEv() c_int;
pub fn GetFrameCount() c_int
{
    return _ZN5ImGui13GetFrameCountEv();
}
extern "c" fn _ZN5ImGui21GetDrawListSharedDataEv() ?*ImDrawListSharedData;
pub fn GetDrawListSharedData() ?*ImDrawListSharedData
{
    return _ZN5ImGui21GetDrawListSharedDataEv();
}
extern "c" fn _ZN5ImGui17GetStyleColorNameEi(idx: c_int) ?[*:0]const u8;
pub fn GetStyleColorName(idx: c_int) ?[*:0]const u8
{
    return _ZN5ImGui17GetStyleColorNameEi(idx);
}
extern "c" fn _ZN5ImGui15SetStateStorageEP12ImGuiStorage(storage: ?*ImGuiStorage) void;
pub fn SetStateStorage(storage: ?*ImGuiStorage) void
{
    return _ZN5ImGui15SetStateStorageEP12ImGuiStorage(storage);
}
extern "c" fn _ZN5ImGui15GetStateStorageEv() ?*ImGuiStorage;
pub fn GetStateStorage() ?*ImGuiStorage
{
    return _ZN5ImGui15GetStateStorageEv();
}
extern "c" fn _ZN5ImGui15BeginChildFrameEjRK6ImVec2i(_id: c_uint, size: *const ImVec2, flags: c_int) bool;
pub fn BeginChildFrame(_id: c_uint, size: ImVec2, __default: struct{flags: c_int= 0}) bool
{
    return _ZN5ImGui15BeginChildFrameEjRK6ImVec2i(_id, &size, __default.flags);
}
extern "c" fn _ZN5ImGui13EndChildFrameEv() void;
pub fn EndChildFrame() void
{
    return _ZN5ImGui13EndChildFrameEv();
}
extern "c" fn imgui_CalcTextSize(v: *ImVec2, text: ?[*:0]const u8, text_end: ?[*:0]const u8, hide_text_after_double_hash: bool, wrap_width: f32) void;
pub fn CalcTextSize() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_CalcTextSize(&v);
    return v;
}

extern "c" fn imgui_ColorConvertU32ToFloat4(v: *ImVec4, _in: c_uint) void;
pub fn ColorConvertU32ToFloat4() ImVec4
{
    var v: ImVec4 = undefined;
    imgui_ColorConvertU32ToFloat4(&v);
    return v;
}

extern "c" fn _ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4(_in: *const ImVec4) c_uint;
pub fn ColorConvertFloat4ToU32(_in: ImVec4) c_uint
{
    return _ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4(&_in);
}
extern "c" fn _ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_(r: f32, g: f32, b: f32, out_h: *f32, out_s: *f32, out_v: *f32) void;
pub fn ColorConvertRGBtoHSV(r: f32, g: f32, b: f32, out_h: *f32, out_s: *f32, out_v: *f32) void
{
    return _ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_(r, g, b, out_h, out_s, out_v);
}
extern "c" fn _ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(h: f32, s: f32, v: f32, out_r: *f32, out_g: *f32, out_b: *f32) void;
pub fn ColorConvertHSVtoRGB(h: f32, s: f32, v: f32, out_r: *f32, out_g: *f32, out_b: *f32) void
{
    return _ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_(h, s, v, out_r, out_g, out_b);
}
extern "c" fn _ZN5ImGui9IsKeyDownEi(key: c_int) bool;
pub fn IsKeyDown(key: c_int) bool
{
    return _ZN5ImGui9IsKeyDownEi(key);
}
extern "c" fn _ZN5ImGui12IsKeyPressedEib(key: c_int, repeat: bool) bool;
pub fn IsKeyPressed(key: c_int, __default: struct{repeat: bool= true}) bool
{
    return _ZN5ImGui12IsKeyPressedEib(key, __default.repeat);
}
extern "c" fn _ZN5ImGui13IsKeyReleasedEi(key: c_int) bool;
pub fn IsKeyReleased(key: c_int) bool
{
    return _ZN5ImGui13IsKeyReleasedEi(key);
}
extern "c" fn _ZN5ImGui19GetKeyPressedAmountEiff(key: c_int, repeat_delay: f32, rate: f32) c_int;
pub fn GetKeyPressedAmount(key: c_int, repeat_delay: f32, rate: f32) c_int
{
    return _ZN5ImGui19GetKeyPressedAmountEiff(key, repeat_delay, rate);
}
extern "c" fn _ZN5ImGui10GetKeyNameEi(key: c_int) ?[*:0]const u8;
pub fn GetKeyName(key: c_int) ?[*:0]const u8
{
    return _ZN5ImGui10GetKeyNameEi(key);
}
extern "c" fn _ZN5ImGui31SetNextFrameWantCaptureKeyboardEb(want_capture_keyboard: bool) void;
pub fn SetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool) void
{
    return _ZN5ImGui31SetNextFrameWantCaptureKeyboardEb(want_capture_keyboard);
}
extern "c" fn _ZN5ImGui11IsMouseDownEi(button: c_int) bool;
pub fn IsMouseDown(button: c_int) bool
{
    return _ZN5ImGui11IsMouseDownEi(button);
}
extern "c" fn _ZN5ImGui14IsMouseClickedEib(button: c_int, repeat: bool) bool;
pub fn IsMouseClicked(button: c_int, __default: struct{repeat: bool= false}) bool
{
    return _ZN5ImGui14IsMouseClickedEib(button, __default.repeat);
}
extern "c" fn _ZN5ImGui15IsMouseReleasedEi(button: c_int) bool;
pub fn IsMouseReleased(button: c_int) bool
{
    return _ZN5ImGui15IsMouseReleasedEi(button);
}
extern "c" fn _ZN5ImGui20IsMouseDoubleClickedEi(button: c_int) bool;
pub fn IsMouseDoubleClicked(button: c_int) bool
{
    return _ZN5ImGui20IsMouseDoubleClickedEi(button);
}
extern "c" fn _ZN5ImGui20GetMouseClickedCountEi(button: c_int) c_int;
pub fn GetMouseClickedCount(button: c_int) c_int
{
    return _ZN5ImGui20GetMouseClickedCountEi(button);
}
extern "c" fn _ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b(r_min: *const ImVec2, r_max: *const ImVec2, clip: bool) bool;
pub fn IsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, __default: struct{clip: bool= true}) bool
{
    return _ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b(&r_min, &r_max, __default.clip);
}
extern "c" fn _ZN5ImGui15IsMousePosValidEPK6ImVec2(mouse_pos: ?*const ImVec2) bool;
pub fn IsMousePosValid(__default: struct{mouse_pos: ?*const ImVec2= null}) bool
{
    return _ZN5ImGui15IsMousePosValidEPK6ImVec2(__default.mouse_pos);
}
extern "c" fn _ZN5ImGui14IsAnyMouseDownEv() bool;
pub fn IsAnyMouseDown() bool
{
    return _ZN5ImGui14IsAnyMouseDownEv();
}
extern "c" fn imgui_GetMousePos(v: *ImVec2) void;
pub fn GetMousePos() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetMousePos(&v);
    return v;
}

extern "c" fn imgui_GetMousePosOnOpeningCurrentPopup(v: *ImVec2) void;
pub fn GetMousePosOnOpeningCurrentPopup() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetMousePosOnOpeningCurrentPopup(&v);
    return v;
}

extern "c" fn _ZN5ImGui15IsMouseDraggingEif(button: c_int, lock_threshold: f32) bool;
pub fn IsMouseDragging(button: c_int, __default: struct{lock_threshold: f32= -1.0}) bool
{
    return _ZN5ImGui15IsMouseDraggingEif(button, __default.lock_threshold);
}
extern "c" fn imgui_GetMouseDragDelta(v: *ImVec2, button: c_int, lock_threshold: f32) void;
pub fn GetMouseDragDelta() ImVec2
{
    var v: ImVec2 = undefined;
    imgui_GetMouseDragDelta(&v);
    return v;
}

extern "c" fn _ZN5ImGui19ResetMouseDragDeltaEi(button: c_int) void;
pub fn ResetMouseDragDelta(__default: struct{button: c_int= 0}) void
{
    return _ZN5ImGui19ResetMouseDragDeltaEi(__default.button);
}
extern "c" fn _ZN5ImGui14GetMouseCursorEv() c_int;
pub fn GetMouseCursor() c_int
{
    return _ZN5ImGui14GetMouseCursorEv();
}
extern "c" fn _ZN5ImGui14SetMouseCursorEi(cursor_type: c_int) void;
pub fn SetMouseCursor(cursor_type: c_int) void
{
    return _ZN5ImGui14SetMouseCursorEi(cursor_type);
}
extern "c" fn _ZN5ImGui28SetNextFrameWantCaptureMouseEb(want_capture_mouse: bool) void;
pub fn SetNextFrameWantCaptureMouse(want_capture_mouse: bool) void
{
    return _ZN5ImGui28SetNextFrameWantCaptureMouseEb(want_capture_mouse);
}
extern "c" fn _ZN5ImGui16GetClipboardTextEv() ?[*:0]const u8;
pub fn GetClipboardText() ?[*:0]const u8
{
    return _ZN5ImGui16GetClipboardTextEv();
}
extern "c" fn _ZN5ImGui16SetClipboardTextEPKc(text: ?[*:0]const u8) void;
pub fn SetClipboardText(text: ?[*:0]const u8) void
{
    return _ZN5ImGui16SetClipboardTextEPKc(text);
}
extern "c" fn _ZN5ImGui23LoadIniSettingsFromDiskEPKc(ini_filename: ?[*:0]const u8) void;
pub fn LoadIniSettingsFromDisk(ini_filename: ?[*:0]const u8) void
{
    return _ZN5ImGui23LoadIniSettingsFromDiskEPKc(ini_filename);
}
extern "c" fn _ZN5ImGui25LoadIniSettingsFromMemoryEPKcy(ini_data: ?[*:0]const u8, ini_size: usize) void;
pub fn LoadIniSettingsFromMemory(ini_data: ?[*:0]const u8, __default: struct{ini_size: usize= 0}) void
{
    return _ZN5ImGui25LoadIniSettingsFromMemoryEPKcy(ini_data, __default.ini_size);
}
extern "c" fn _ZN5ImGui21SaveIniSettingsToDiskEPKc(ini_filename: ?[*:0]const u8) void;
pub fn SaveIniSettingsToDisk(ini_filename: ?[*:0]const u8) void
{
    return _ZN5ImGui21SaveIniSettingsToDiskEPKc(ini_filename);
}
extern "c" fn _ZN5ImGui23SaveIniSettingsToMemoryEPy(out_ini_size: ?*usize) ?[*:0]const u8;
pub fn SaveIniSettingsToMemory(__default: struct{out_ini_size: ?*usize= null}) ?[*:0]const u8
{
    return _ZN5ImGui23SaveIniSettingsToMemoryEPy(__default.out_ini_size);
}
extern "c" fn _ZN5ImGui17DebugTextEncodingEPKc(text: ?[*:0]const u8) void;
pub fn DebugTextEncoding(text: ?[*:0]const u8) void
{
    return _ZN5ImGui17DebugTextEncodingEPKc(text);
}
extern "c" fn _ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcyyyyyy(version_str: ?[*:0]const u8, sz_io: usize, sz_style: usize, sz_vec2: usize, sz_vec4: usize, sz_drawvert: usize, sz_drawidx: usize) bool;
pub fn DebugCheckVersionAndDataLayout(version_str: ?[*:0]const u8, sz_io: usize, sz_style: usize, sz_vec2: usize, sz_vec4: usize, sz_drawvert: usize, sz_drawidx: usize) bool
{
    return _ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcyyyyyy(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
}
extern "c" fn _ZN5ImGui21SetAllocatorFunctionsEPFPvyS0_EPFvS0_S0_ES0_(alloc_func: *const ImGuiMemAllocFunc, free_func: *const ImGuiMemFreeFunc, user_data: ?*anyopaque) void;
pub fn SetAllocatorFunctions(alloc_func: *const ImGuiMemAllocFunc, free_func: *const ImGuiMemFreeFunc, __default: struct{user_data: ?*anyopaque= null}) void
{
    return _ZN5ImGui21SetAllocatorFunctionsEPFPvyS0_EPFvS0_S0_ES0_(alloc_func, free_func, __default.user_data);
}
extern "c" fn _ZN5ImGui21GetAllocatorFunctionsEPPFPvyS0_EPPFvS0_S0_EPS0_(p_alloc_func: ?**const ImGuiMemAllocFunc, p_free_func: ?**const ImGuiMemFreeFunc, p_user_data: ?*?*anyopaque) void;
pub fn GetAllocatorFunctions(p_alloc_func: ?**const ImGuiMemAllocFunc, p_free_func: ?**const ImGuiMemFreeFunc, p_user_data: ?*?*anyopaque) void
{
    return _ZN5ImGui21GetAllocatorFunctionsEPPFPvyS0_EPPFvS0_S0_EPS0_(p_alloc_func, p_free_func, p_user_data);
}
extern "c" fn _ZN5ImGui8MemAllocEy(size: usize) ?*anyopaque;
pub fn MemAlloc(size: usize) ?*anyopaque
{
    return _ZN5ImGui8MemAllocEy(size);
}
extern "c" fn _ZN5ImGui7MemFreeEPv(ptr: ?*anyopaque) void;
pub fn MemFree(ptr: ?*anyopaque) void
{
    return _ZN5ImGui7MemFreeEPv(ptr);
}
extern "c" fn _ZN5ImGui13GetPlatformIOEv() *ImGuiPlatformIO;
pub fn GetPlatformIO() *ImGuiPlatformIO
{
    return _ZN5ImGui13GetPlatformIOEv();
}
extern "c" fn _ZN5ImGui21UpdatePlatformWindowsEv() void;
pub fn UpdatePlatformWindows() void
{
    return _ZN5ImGui21UpdatePlatformWindowsEv();
}
extern "c" fn _ZN5ImGui28RenderPlatformWindowsDefaultEPvS0_(platform_render_arg: ?*anyopaque, renderer_render_arg: ?*anyopaque) void;
pub fn RenderPlatformWindowsDefault(__default: struct{platform_render_arg: ?*anyopaque= null, renderer_render_arg: ?*anyopaque= null}) void
{
    return _ZN5ImGui28RenderPlatformWindowsDefaultEPvS0_(__default.platform_render_arg, __default.renderer_render_arg);
}
extern "c" fn _ZN5ImGui22DestroyPlatformWindowsEv() void;
pub fn DestroyPlatformWindows() void
{
    return _ZN5ImGui22DestroyPlatformWindowsEv();
}
extern "c" fn _ZN5ImGui16FindViewportByIDEj(_id: c_uint) ?*ImGuiViewport;
pub fn FindViewportByID(_id: c_uint) ?*ImGuiViewport
{
    return _ZN5ImGui16FindViewportByIDEj(_id);
}
extern "c" fn _ZN5ImGui28FindViewportByPlatformHandleEPv(platform_handle: ?*anyopaque) ?*ImGuiViewport;
pub fn FindViewportByPlatformHandle(platform_handle: ?*anyopaque) ?*ImGuiViewport
{
    return _ZN5ImGui28FindViewportByPlatformHandleEPv(platform_handle);
}
extern "c" fn _ZN5ImGui11GetKeyIndexEi(key: c_int) c_int;
pub fn GetKeyIndex(key: c_int) c_int
{
    return _ZN5ImGui11GetKeyIndexEi(key);
}
extern "c" fn _ZN5ImGui11ImageButtonEPvRK6ImVec2S3_S3_iRK6ImVec4S6_(user_texture_id: ImTextureID, size: *const ImVec2, uv0: *const ImVec2, uv1: *const ImVec2, frame_padding: c_int, bg_col: *const ImVec4, tint_col: *const ImVec4) bool;
pub fn ImageButton_2(user_texture_id: ImTextureID, size: ImVec2, __default: struct{uv0: ImVec2= .{.x=0, .y=0}, uv1: ImVec2= ImVec2(1,1), frame_padding: c_int= -1, bg_col: ImVec4= ImVec4(0,0,0,0), tint_col: ImVec4= ImVec4(1,1,1,1)}) bool
{
    return _ZN5ImGui11ImageButtonEPvRK6ImVec2S3_S3_iRK6ImVec4S6_(user_texture_id, &size, &__default.uv0, &__default.uv1, __default.frame_padding, &__default.bg_col, &__default.tint_col);
}
extern "c" fn _ZN5ImGuiL22CaptureKeyboardFromAppEb(want_capture_keyboard: bool) void;
pub fn CaptureKeyboardFromApp(__default: struct{want_capture_keyboard: bool= true}) void
{
    return _ZN5ImGuiL22CaptureKeyboardFromAppEb(__default.want_capture_keyboard);
}
extern "c" fn _ZN5ImGuiL19CaptureMouseFromAppEb(want_capture_mouse: bool) void;
pub fn CaptureMouseFromApp(__default: struct{want_capture_mouse: bool= true}) void
{
    return _ZN5ImGuiL19CaptureMouseFromAppEb(__default.want_capture_mouse);
}
extern "c" fn _ZN5ImGui16CalcListClippingEifPiS0_(items_count: c_int, items_height: f32, out_items_display_start: ?*c_int, out_items_display_end: ?*c_int) void;
pub fn CalcListClipping(items_count: c_int, items_height: f32, out_items_display_start: ?*c_int, out_items_display_end: ?*c_int) void
{
    return _ZN5ImGui16CalcListClippingEifPiS0_(items_count, items_height, out_items_display_start, out_items_display_end);
}
extern "c" fn _ZN5ImGuiL27GetWindowContentRegionWidthEv() f32;
pub fn GetWindowContentRegionWidth() f32
{
    return _ZN5ImGuiL27GetWindowContentRegionWidthEv();
}
extern "c" fn _ZN5ImGui13ListBoxHeaderEPKcii(label: ?[*:0]const u8, items_count: c_int, height_in_items: c_int) bool;
pub fn ListBoxHeader(label: ?[*:0]const u8, items_count: c_int, __default: struct{height_in_items: c_int= -1}) bool
{
    return _ZN5ImGui13ListBoxHeaderEPKcii(label, items_count, __default.height_in_items);
}
extern "c" fn _ZN5ImGuiL13ListBoxHeaderEPKcRK6ImVec2(label: ?[*:0]const u8, size: *const ImVec2) bool;
pub fn ListBoxHeader_2(label: ?[*:0]const u8, __default: struct{size: ImVec2= .{.x=0, .y=0}}) bool
{
    return _ZN5ImGuiL13ListBoxHeaderEPKcRK6ImVec2(label, &__default.size);
}
extern "c" fn _ZN5ImGuiL13ListBoxFooterEv() void;
pub fn ListBoxFooter() void
{
    return _ZN5ImGuiL13ListBoxFooterEv();
}
extern "c" fn _ZN5ImGuiL20OpenPopupContextItemEPKci(str_id: ?[*:0]const u8, mb: c_int) void;
pub fn OpenPopupContextItem(__default: struct{str_id: ?[*:0]const u8= null, mb: c_int= 1}) void
{
    return _ZN5ImGuiL20OpenPopupContextItemEPKci(__default.str_id, __default.mb);
}
extern "c" fn _ZN5ImGui10DragScalarEPKciPvfPKvS4_S1_f(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, v_speed: f32, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, power: f32) bool;
pub fn DragScalar_2(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, v_speed: f32, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGui10DragScalarEPKciPvfPKvS4_S1_f(label, data_type, p_data, v_speed, p_min, p_max, format, power);
}
extern "c" fn _ZN5ImGui11DragScalarNEPKciPvifPKvS4_S1_f(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, v_speed: f32, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, power: f32) bool;
pub fn DragScalarN_2(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, v_speed: f32, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGui11DragScalarNEPKciPvifPKvS4_S1_f(label, data_type, p_data, components, v_speed, p_min, p_max, format, power);
}
extern "c" fn _ZN5ImGuiL9DragFloatEPKcPffffS1_f(label: ?[*:0]const u8, v: ?*f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool;
pub fn DragFloat_2(label: ?[*:0]const u8, v: ?*f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGuiL9DragFloatEPKcPffffS1_f(label, v, v_speed, v_min, v_max, format, power);
}
extern "c" fn _ZN5ImGuiL10DragFloat2EPKcPffffS1_f(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool;
pub fn DragFloat2_2(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGuiL10DragFloat2EPKcPffffS1_f(label, v, v_speed, v_min, v_max, format, power);
}
extern "c" fn _ZN5ImGuiL10DragFloat3EPKcPffffS1_f(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool;
pub fn DragFloat3_2(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGuiL10DragFloat3EPKcPffffS1_f(label, v, v_speed, v_min, v_max, format, power);
}
extern "c" fn _ZN5ImGuiL10DragFloat4EPKcPffffS1_f(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool;
pub fn DragFloat4_2(label: ?[*:0]const u8, v: *f32, v_speed: f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGuiL10DragFloat4EPKcPffffS1_f(label, v, v_speed, v_min, v_max, format, power);
}
extern "c" fn _ZN5ImGui12SliderScalarEPKciPvPKvS4_S1_f(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, power: f32) bool;
pub fn SliderScalar_2(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGui12SliderScalarEPKciPvPKvS4_S1_f(label, data_type, p_data, p_min, p_max, format, power);
}
extern "c" fn _ZN5ImGui13SliderScalarNEPKciPviPKvS4_S1_f(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, power: f32) bool;
pub fn SliderScalarN_2(label: ?[*:0]const u8, data_type: c_int, p_data: ?*anyopaque, components: c_int, p_min: ?*const anyopaque, p_max: ?*const anyopaque, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGui13SliderScalarNEPKciPviPKvS4_S1_f(label, data_type, p_data, components, p_min, p_max, format, power);
}
extern "c" fn _ZN5ImGuiL11SliderFloatEPKcPfffS1_f(label: ?[*:0]const u8, v: ?*f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool;
pub fn SliderFloat_2(label: ?[*:0]const u8, v: ?*f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGuiL11SliderFloatEPKcPfffS1_f(label, v, v_min, v_max, format, power);
}
extern "c" fn _ZN5ImGuiL12SliderFloat2EPKcPfffS1_f(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool;
pub fn SliderFloat2_2(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGuiL12SliderFloat2EPKcPfffS1_f(label, v, v_min, v_max, format, power);
}
extern "c" fn _ZN5ImGuiL12SliderFloat3EPKcPfffS1_f(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool;
pub fn SliderFloat3_2(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGuiL12SliderFloat3EPKcPfffS1_f(label, v, v_min, v_max, format, power);
}
extern "c" fn _ZN5ImGuiL12SliderFloat4EPKcPfffS1_f(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool;
pub fn SliderFloat4_2(label: ?[*:0]const u8, v: *f32, v_min: f32, v_max: f32, format: ?[*:0]const u8, power: f32) bool
{
    return _ZN5ImGuiL12SliderFloat4EPKcPfffS1_f(label, v, v_min, v_max, format, power);
}
extern "c" fn _ZN5ImGuiL23BeginPopupContextWindowEPKcib(str_id: ?[*:0]const u8, mb: c_int, over_items: bool) bool;
pub fn BeginPopupContextWindow_2(str_id: ?[*:0]const u8, mb: c_int, over_items: bool) bool
{
    return _ZN5ImGuiL23BeginPopupContextWindowEPKcib(str_id, mb, over_items);
}
